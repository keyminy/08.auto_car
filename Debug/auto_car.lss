
auto_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000108e  00001122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000371  0080011c  0080011c  0000113e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000113e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187d  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc4  00000000  00000000  00002c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e59  00000000  00000000  00003be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00004a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007eb  00000000  00000000  00004e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069a  00000000  00000000  0000564f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005ce9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	93 c2       	rjmp	.+1318   	; 0x53c <__vector_5>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__vector_16>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c1       	rjmp	.+842    	; 0x394 <__vector_18>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1f c2       	rjmp	.+1086   	; 0x4b8 <__vector_30>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e8       	ldi	r30, 0x8E	; 142
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 31       	cpi	r26, 0x1C	; 28
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	ac e1       	ldi	r26, 0x1C	; 28
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 38       	cpi	r26, 0x8D	; 141
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	9d d0       	rcall	.+314    	; 0x1fe <main>
      c4:	e2 c7       	rjmp	.+4036   	; 0x108a <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:

// 76543210
// DDRD &= 0x0f; // port[7:4]까지 input으로 선언된것
void init_button(void){
	// one's complement
	BUTTON_DDR &= ~(1<<BUTTON1_PIN);
      c8:	84 b3       	in	r24, 0x14	; 20
      ca:	8f 77       	andi	r24, 0x7F	; 127
      cc:	84 bb       	out	0x14, r24	; 20
      ce:	08 95       	ret

000000d0 <get_button>:
int get_button(int button_pin, int button_number){
	int current_state;

	//예)BUTTON1은 4가 넘어옴, 2는 5, 3은 5...
	//BUTTON_PIN값은 눌리면1 안눌리면 0값을 감지함
	current_state = BUTTON_PIN & (1 << button_pin); // 10000 (1<<4결과)
      d0:	43 b3       	in	r20, 0x13	; 19
      d2:	50 e0       	ldi	r21, 0x00	; 0
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	f9 01       	movw	r30, r18
      da:	02 c0       	rjmp	.+4      	; 0xe0 <get_button+0x10>
      dc:	ee 0f       	add	r30, r30
      de:	ff 1f       	adc	r31, r31
      e0:	8a 95       	dec	r24
      e2:	e2 f7       	brpl	.-8      	; 0xdc <get_button+0xc>
      e4:	cf 01       	movw	r24, r30
      e6:	84 23       	and	r24, r20
      e8:	95 23       	and	r25, r21
	//current_state변수로 버튼 값을 읽습니다.

	if(current_state && previous_button_status[button_number]== BUTTON_RELEASE){
      ea:	00 97       	sbiw	r24, 0x00	; 0
      ec:	b9 f0       	breq	.+46     	; 0x11c <get_button+0x4c>
      ee:	fb 01       	movw	r30, r22
      f0:	e4 5e       	subi	r30, 0xE4	; 228
      f2:	fe 4f       	sbci	r31, 0xFE	; 254
      f4:	20 81       	ld	r18, Z
      f6:	21 11       	cpse	r18, r1
      f8:	11 c0       	rjmp	.+34     	; 0x11c <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fa:	ff ef       	ldi	r31, 0xFF	; 255
      fc:	2d ee       	ldi	r18, 0xED	; 237
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	f1 50       	subi	r31, 0x01	; 1
     102:	20 40       	sbci	r18, 0x00	; 0
     104:	80 40       	sbci	r24, 0x00	; 0
     106:	e1 f7       	brne	.-8      	; 0x100 <get_button+0x30>
     108:	00 c0       	rjmp	.+0      	; 0x10a <get_button+0x3a>
     10a:	00 00       	nop
		// 버튼이 처음 눌러진 상태
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		previous_button_status[button_number] = BUTTON_PRESS; // 처음 눌러진 상태가 아니다
     10c:	fb 01       	movw	r30, r22
     10e:	e4 5e       	subi	r30, 0xE4	; 228
     110:	fe 4f       	sbci	r31, 0xFE	; 254
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	80 83       	st	Z, r24
		return 0; //아직 완전히 눌렀다 떼어진 상태가 아니다.
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	08 95       	ret
	} // 버튼이 이전에 눌러진 상태였으면 현재는 떼어진 상태
	else if(previous_button_status[button_number] == BUTTON_PRESS && current_state == BUTTON_RELEASE){
     11c:	fb 01       	movw	r30, r22
     11e:	e4 5e       	subi	r30, 0xE4	; 228
     120:	fe 4f       	sbci	r31, 0xFE	; 254
     122:	20 81       	ld	r18, Z
     124:	21 30       	cpi	r18, 0x01	; 1
     126:	91 f4       	brne	.+36     	; 0x14c <get_button+0x7c>
     128:	89 2b       	or	r24, r25
     12a:	99 f4       	brne	.+38     	; 0x152 <get_button+0x82>
		previous_button_status[button_number] = BUTTON_RELEASE; // 다음 버튼 상태를 체크하기 위해 초기화
     12c:	fb 01       	movw	r30, r22
     12e:	e4 5e       	subi	r30, 0xE4	; 228
     130:	fe 4f       	sbci	r31, 0xFE	; 254
     132:	10 82       	st	Z, r1
     134:	9f ef       	ldi	r25, 0xFF	; 255
     136:	ed ee       	ldi	r30, 0xED	; 237
     138:	f2 e0       	ldi	r31, 0x02	; 2
     13a:	91 50       	subi	r25, 0x01	; 1
     13c:	e0 40       	sbci	r30, 0x00	; 0
     13e:	f0 40       	sbci	r31, 0x00	; 0
     140:	e1 f7       	brne	.-8      	; 0x13a <get_button+0x6a>
     142:	00 c0       	rjmp	.+0      	; 0x144 <get_button+0x74>
     144:	00 00       	nop
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		return 1; // 완전히 눌렀다 떼어진 상태
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	08 95       	ret
	}
	// 아직 HIGH인 상태인 것이지
	// 아직 완전히 스위치를 눌렀다 뗀 상태가 아니거나 스위치가 open된 상태 -> return 0;
	return 0;
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	08 95       	ret
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
}
     156:	08 95       	ret

00000158 <auto_mode_check>:
	BUTTON_DDR &= ~(1<<BUTTON1_PIN);
}


void auto_mode_check(){
	if(get_button(BUTTON1_PIN,BUTTON1)){
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	87 e0       	ldi	r24, 0x07	; 7
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	b7 df       	rcall	.-146    	; 0xd0 <get_button>
     162:	89 2b       	or	r24, r25
     164:	71 f0       	breq	.+28     	; 0x182 <auto_mode_check+0x2a>
		button1_state = !button1_state;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <button1_state>
     16e:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <button1_state+0x1>
     172:	23 2b       	or	r18, r19
     174:	11 f0       	breq	.+4      	; 0x17a <auto_mode_check+0x22>
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <button1_state+0x1>
     17e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <button1_state>
	}
	if(button1_state){
     182:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <button1_state>
     186:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <button1_state+0x1>
     18a:	89 2b       	or	r24, r25
     18c:	39 f0       	breq	.+14     	; 0x19c <auto_mode_check+0x44>
		PORTG |= 1 << 3; //3번핀의 LED ON
     18e:	e5 e6       	ldi	r30, 0x65	; 101
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	88 60       	ori	r24, 0x08	; 8
		stop();
     196:	80 83       	st	Z, r24
     198:	7a c0       	rjmp	.+244    	; 0x28e <stop>
     19a:	08 95       	ret
	}else{
		PORTG &= ~(1 << 3); // LED OFF
     19c:	e5 e6       	ldi	r30, 0x65	; 101
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	87 7f       	andi	r24, 0xF7	; 247
		manual_mode_run();
     1a4:	80 83       	st	Z, r24
     1a6:	80 c0       	rjmp	.+256    	; 0x2a8 <manual_mode_run>
     1a8:	08 95       	ret

000001aa <init_led>:
#include "extern.h"
#include "def.h"

// LED가 PORTG의 3번
void init_led(){
	DDRG |= 1 << 3;
     1aa:	e4 e6       	ldi	r30, 0x64	; 100
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	88 60       	ori	r24, 0x08	; 8
     1b2:	80 83       	st	Z, r24
     1b4:	08 95       	ret

000001b6 <init_pwm_motor>:
void auto_drive(){
	
}
void init_pwm_motor(void)
{
	MOTOR_DRIVER_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;  // IN1 IN2 IN3 IN4
     1b6:	e1 e6       	ldi	r30, 0x61	; 97
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8f 60       	ori	r24, 0x0F	; 15
     1be:	80 83       	st	Z, r24
	MOTOR_DDR |= 1 << MOTOR_RIGHT_PORT_DDR | 1 << MOTOR_LEFT_PORT_DDR;   // PWM Port
     1c0:	87 b3       	in	r24, 0x17	; 23
     1c2:	80 66       	ori	r24, 0x60	; 96
     1c4:	87 bb       	out	0x17, r24	; 23
	// 16000000HZ / 64 ==> 250000HZ (timer 1번에 공급 되는 clcok)
	// - 펄스를 265개를 count하면 : 256 / 250000 ==> 1.02ms
	// -       127개             : 127 / 250000 ==> 0.5ms
	// - 0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10; //64분주
     1c6:	8e b5       	in	r24, 0x2e	; 46
     1c8:	83 60       	ori	r24, 0x03	; 3
     1ca:	8e bd       	out	0x2e, r24	; 46
	
	// 모드 14
	TCCR1B |= 1 << WGM13 | 1 << WGM12;   // 모드14  고속PWM ICR1
     1cc:	8e b5       	in	r24, 0x2e	; 46
     1ce:	88 61       	ori	r24, 0x18	; 24
     1d0:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= 1 << WGM11 | 0 << WGM10;   // 모드14
     1d2:	8f b5       	in	r24, 0x2f	; 47
     1d4:	82 60       	ori	r24, 0x02	; 2
     1d6:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A |= 1 << COM1A1 | 0 << COM1A0;   // 비반전모드 : OCR값을 만나면 PWM 이 LOW가
     1d8:	8f b5       	in	r24, 0x2f	; 47
     1da:	80 68       	ori	r24, 0x80	; 128
     1dc:	8f bd       	out	0x2f, r24	; 47
											//             TOP값을 만나면 PWM이 High
	TCCR1A |= 1 << COM1B1 | 0 << COM1B0;   // 비반전모드
     1de:	8f b5       	in	r24, 0x2f	; 47
     1e0:	80 62       	ori	r24, 0x20	; 32
     1e2:	8f bd       	out	0x2f, r24	; 47
	
	MOTOR_DRIVER_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 ); //0b11110000의 뜻
     1e4:	e2 e6       	ldi	r30, 0x62	; 98
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	80 7f       	andi	r24, 0xF0	; 240
     1ec:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= 1 << 2 | 1 << 0;  // 전진(정회전) 모드로 set
     1ee:	80 81       	ld	r24, Z
     1f0:	85 60       	ori	r24, 0x05	; 5
     1f2:	80 83       	st	Z, r24
	//0b11110101가 되려나? // INT2,INT4를 0으로만들어줫슴, INT1,INT3 : 1
	ICR1 = 0x3ff;  // 0x3ff(1023) : 4ms
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	93 e0       	ldi	r25, 0x03	; 3
     1f8:	97 bd       	out	0x27, r25	; 39
     1fa:	86 bd       	out	0x26, r24	; 38
     1fc:	08 95       	ret

000001fe <main>:
// 1. for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit,NULL, _FDEV_SETUP_WRITE);
extern int button1_state;
int main(void)
{
	init_led();
     1fe:	d5 df       	rcall	.-86     	; 0x1aa <init_led>
	init_timer0();
     200:	74 d0       	rcall	.+232    	; 0x2ea <init_timer0>
	init_uart0();
     202:	46 d1       	rcall	.+652    	; 0x490 <init_uart0>
	init_uart1();
     204:	86 d1       	rcall	.+780    	; 0x512 <init_uart1>
     206:	60 df       	rcall	.-320    	; 0xc8 <init_button>
	init_button();
     208:	d6 df       	rcall	.-84     	; 0x1b6 <init_pwm_motor>
     20a:	80 e0       	ldi	r24, 0x00	; 0
	init_pwm_motor();
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <__iob+0x3>
	stdout = &OUTPUT; // 2. printf가 동작되도록 stdout에 OUTPUT파일 포인터를 assign한다.
     212:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <__iob+0x2>
     216:	6f d2       	rcall	.+1246   	; 0x6f6 <init_ultrasonic>
	// fprintf(stdout,"test"); == printf("test\n");
	// scanf("%s",buff); --> stdin
	// fgets(input,100,stdin); //여기서 stdin이 가리키는 것은 키보드입니다.
	
	init_ultrasonic(); // sei전에 초음파관련 initialize
     218:	78 94       	sei
     21a:	9e df       	rcall	.-196    	; 0x158 <auto_mode_check>
	/* 나중에 주석해체, LCD연결안하면 I2C_LCD_init()에서 갇힌다. */
	//I2C_LCD_init();
	sei(); // 전역적으로 인터럽트를 허용하겠다
     21c:	fe cf       	rjmp	.-4      	; 0x21a <main+0x1c>

0000021e <forward>:
	
    while (1) 
    {
		// manual_mode_run(); // bt command로 제어한다.
		auto_mode_check();
     21e:	9c 01       	movw	r18, r24
     220:	e2 e6       	ldi	r30, 0x62	; 98
     222:	f0 e0       	ldi	r31, 0x00	; 0
	}
}

void forward(int speed)
{
	MOTOR_DRIVER_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3); //0b11110000의 뜻
     224:	90 81       	ld	r25, Z
     226:	90 7f       	andi	r25, 0xF0	; 240
     228:	90 83       	st	Z, r25
	MOTOR_DRIVER_PORT |= 1 << 2 | 1 << 0;   // 전진(정회전) 모드로 set
     22a:	90 81       	ld	r25, Z
     22c:	95 60       	ori	r25, 0x05	; 5
     22e:	90 83       	st	Z, r25
	//0b11110101가 되려나? // INT2,INT4를 0으로만들어줫슴, INT1,INT3 : 1
	OCR1A = speed;   // PB5 PWM출력 left
     230:	3b bd       	out	0x2b, r19	; 43
     232:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed; 	 // PB6 PWM출력 right
     234:	39 bd       	out	0x29, r19	; 41
     236:	28 bd       	out	0x28, r18	; 40
     238:	08 95       	ret

0000023a <backward>:
}

void backward(int speed)
{
     23a:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 ); //0b11110000의 뜻
     23c:	e2 e6       	ldi	r30, 0x62	; 98
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	90 81       	ld	r25, Z
     242:	90 7f       	andi	r25, 0xF0	; 240
     244:	90 83       	st	Z, r25
	MOTOR_DRIVER_PORT |= 1 << 3 | 1 << 1; // 0101 후진 모드로 set
     246:	90 81       	ld	r25, Z
     248:	9a 60       	ori	r25, 0x0A	; 10
     24a:	90 83       	st	Z, r25
	
	OCR1A = speed;   // PB5 PWM출력 left
     24c:	3b bd       	out	0x2b, r19	; 43
     24e:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed; 	 // PB6 PWM출력 right
     250:	39 bd       	out	0x29, r19	; 41
     252:	28 bd       	out	0x28, r18	; 40
     254:	08 95       	ret

00000256 <left>:
}

void left(int speed)
{
     256:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 ); //0b11110000의 뜻
     258:	e2 e6       	ldi	r30, 0x62	; 98
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	90 81       	ld	r25, Z
     25e:	90 7f       	andi	r25, 0xF0	; 240
     260:	90 83       	st	Z, r25
	MOTOR_DRIVER_PORT |= 1 << 2 | 1 << 0; //정회전 전진 모드로 set
     262:	90 81       	ld	r25, Z
     264:	95 60       	ori	r25, 0x05	; 5
     266:	90 83       	st	Z, r25
	
	OCR1A = speed; //PB5 PWM 출력 left
     268:	3b bd       	out	0x2b, r19	; 43
     26a:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0; //PB6 PWM 출력 right
     26c:	19 bc       	out	0x29, r1	; 41
     26e:	18 bc       	out	0x28, r1	; 40
     270:	08 95       	ret

00000272 <right>:
}

void right(int speed)
{
     272:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 ); //0b11110000의 뜻
     274:	e2 e6       	ldi	r30, 0x62	; 98
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	90 81       	ld	r25, Z
     27a:	90 7f       	andi	r25, 0xF0	; 240
     27c:	90 83       	st	Z, r25
	MOTOR_DRIVER_PORT |= 1 << 2 | 1 << 0; //정회전 전진 모드로 set
     27e:	90 81       	ld	r25, Z
     280:	95 60       	ori	r25, 0x05	; 5
     282:	90 83       	st	Z, r25
	
	OCR1A = 0; //PB5 PWM 출력 left
     284:	1b bc       	out	0x2b, r1	; 43
     286:	1a bc       	out	0x2a, r1	; 42
	OCR1B = speed; //PB6 PWM 출력 right
     288:	39 bd       	out	0x29, r19	; 41
     28a:	28 bd       	out	0x28, r18	; 40
     28c:	08 95       	ret

0000028e <stop>:
}

void stop()
{
	MOTOR_DRIVER_PORT &= ~( 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 ); //0b11110000의 뜻
     28e:	e2 e6       	ldi	r30, 0x62	; 98
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	80 7f       	andi	r24, 0xF0	; 240
     296:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= 1 << 3 | 1 << 2 | 1 << 1 | 1 << 0;
     298:	80 81       	ld	r24, Z
     29a:	8f 60       	ori	r24, 0x0F	; 15
     29c:	80 83       	st	Z, r24
	
	OCR1A = 0; //PB5 PWM 출력 left
     29e:	1b bc       	out	0x2b, r1	; 43
     2a0:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0; //PB6 PWM 출력 right
     2a2:	19 bc       	out	0x29, r1	; 41
     2a4:	18 bc       	out	0x28, r1	; 40
     2a6:	08 95       	ret

000002a8 <manual_mode_run>:
// 'R' : 우회전
extern volatile uint8_t uart1_rx_data;

void manual_mode_run(void)
{
	switch (uart1_rx_data)
     2a8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <uart1_rx_data>
     2ac:	8c 34       	cpi	r24, 0x4C	; 76
     2ae:	99 f0       	breq	.+38     	; 0x2d6 <manual_mode_run+0x2e>
     2b0:	28 f4       	brcc	.+10     	; 0x2bc <manual_mode_run+0x14>
     2b2:	82 34       	cpi	r24, 0x42	; 66
     2b4:	61 f0       	breq	.+24     	; 0x2ce <manual_mode_run+0x26>
     2b6:	86 34       	cpi	r24, 0x46	; 70
     2b8:	31 f0       	breq	.+12     	; 0x2c6 <manual_mode_run+0x1e>
     2ba:	08 95       	ret
     2bc:	82 35       	cpi	r24, 0x52	; 82
     2be:	79 f0       	breq	.+30     	; 0x2de <manual_mode_run+0x36>
     2c0:	83 35       	cpi	r24, 0x53	; 83
     2c2:	89 f0       	breq	.+34     	; 0x2e6 <manual_mode_run+0x3e>
     2c4:	08 95       	ret
	{
		case 'F':   // forward
		forward(500);  // 4us x 500 ==> 0.002sec(2ms)
     2c6:	84 ef       	ldi	r24, 0xF4	; 244
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	a9 cf       	rjmp	.-174    	; 0x21e <forward>
		break;
     2cc:	08 95       	ret

		case 'B': //backward
		backward(500);
     2ce:	84 ef       	ldi	r24, 0xF4	; 244
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	b3 cf       	rjmp	.-154    	; 0x23a <backward>
		break;
     2d4:	08 95       	ret
		
		case 'L': //left
		left(700);
     2d6:	8c eb       	ldi	r24, 0xBC	; 188
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	bd cf       	rjmp	.-134    	; 0x256 <left>
		break;
		
		case 'R': //right
		right(700);
     2dc:	08 95       	ret
     2de:	8c eb       	ldi	r24, 0xBC	; 188
     2e0:	92 e0       	ldi	r25, 0x02	; 2
		break;
     2e2:	c7 cf       	rjmp	.-114    	; 0x272 <right>
		
		case 'S': //stop
		stop();
     2e4:	08 95       	ret
     2e6:	d3 cf       	rjmp	.-90     	; 0x28e <stop>
     2e8:	08 95       	ret

000002ea <init_timer0>:
	// 3. 8bit timer overflow : 0.004ms * 256개 카운트 = 0.001024sec = 1.024ms
	// 1ms가 정확히 안되자너... 1ms가 정확히 될려면 어떻게 해야하나?
	// 0.004ms * 250 = 0.001(=1ms)
	
	//진짜 나중에 추가한 코드임
	TCNT0 = 6; // 6부터 count하는것임, TCNT : 0~256카운트하기때문에, 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
     2ea:	86 e0       	ldi	r24, 0x06	; 6
     2ec:	82 bf       	out	0x32, r24	; 50
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // (1)분주비 64로 셋팅(p.296 표13-1 참고)
     2ee:	83 b7       	in	r24, 0x33	; 51
     2f0:	84 60       	ori	r24, 0x04	; 4
     2f2:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0; // (2) TIMER0 overflow interrupt허용
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	87 bf       	out	0x37, r24	; 55
     2f8:	08 95       	ret

000002fa <__vector_16>:
}

// 256개의 pulse(=1ms)를 count하면 이곳으로 자동적으로 진입한다.
// 즉, 256개의 pulse == 1ms
ISR(TIMER0_OVF_vect){
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	8f 93       	push	r24
     306:	9f 93       	push	r25
     308:	af 93       	push	r26
     30a:	bf 93       	push	r27
	/* 인터럽트 루틴을 가능한 짧게 짜라, ms_count만 증가시키고 빠져나오게함 */
	TCNT0=6; // 6 ~ 256개의 pulse카운트 --> 1ms를 맞춰주기 위해서 TCNT0을 6으로 설정
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	82 bf       	out	0x32, r24	; 50
	ms_count++;
     310:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ms_count>
     314:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ms_count+0x1>
     318:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <ms_count+0x2>
     31c:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <ms_count+0x3>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	a1 1d       	adc	r26, r1
     324:	b1 1d       	adc	r27, r1
     326:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <ms_count>
     32a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <ms_count+0x1>
     32e:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <ms_count+0x2>
     332:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <ms_count+0x3>
	//ms_count delay없애는 작업필요함
	shift_timer++;
     336:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <shift_timer>
     33a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <shift_timer+0x1>
     33e:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <shift_timer+0x2>
     342:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <shift_timer+0x3>
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	a1 1d       	adc	r26, r1
     34a:	b1 1d       	adc	r27, r1
     34c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <shift_timer>
     350:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <shift_timer+0x1>
     354:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <shift_timer+0x2>
     358:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <shift_timer+0x3>
	ultrasonic_trigger_timer++;
     35c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ultrasonic_trigger_timer>
     360:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ultrasonic_trigger_timer+0x1>
     364:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <ultrasonic_trigger_timer+0x2>
     368:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <ultrasonic_trigger_timer+0x3>
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	a1 1d       	adc	r26, r1
     370:	b1 1d       	adc	r27, r1
     372:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ultrasonic_trigger_timer>
     376:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ultrasonic_trigger_timer+0x1>
     37a:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <ultrasonic_trigger_timer+0x2>
     37e:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <ultrasonic_trigger_timer+0x3>
}
     382:	bf 91       	pop	r27
     384:	af 91       	pop	r26
     386:	9f 91       	pop	r25
     388:	8f 91       	pop	r24
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_18>:

// 3.RX인터럽트(수신) : interrupt를 활성화 시킬거야
// 인터럽트벡터 서비스루틴은 선언할 필요없고,제어만 해주면됨
// ISR : HW와 SW의 만남의 장소, 인터럽트가 뜨면 여기로 들어와라
// 1byte를 수신 할때 마다 이곳으로 들어온다.
ISR(USART0_RX_vect){
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	0b b6       	in	r0, 0x3b	; 59
     3a0:	0f 92       	push	r0
     3a2:	2f 93       	push	r18
     3a4:	3f 93       	push	r19
     3a6:	4f 93       	push	r20
     3a8:	5f 93       	push	r21
     3aa:	6f 93       	push	r22
     3ac:	7f 93       	push	r23
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
     3b2:	af 93       	push	r26
     3b4:	bf 93       	push	r27
     3b6:	ef 93       	push	r30
     3b8:	ff 93       	push	r31
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	1f 92       	push	r1
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	// 최적화 방지를위해 ISR내에서는 volatile키워드
	volatile static int i=0;
	// 1byte를 읽어 처리할 로직을 여기넣음
	volatile uint8_t data;
	
	data = UDR0; //UART0의 hardware register(UDR0)로 부터 1byte를 읽어간다.
     3c4:	8c b1       	in	r24, 0x0c	; 12
     3c6:	89 83       	std	Y+1, r24	; 0x01
	//printf("%c\n",data); // 하나찍을때 마다 1ms (다음 데이터 못받을수잇으므로 하지마라)
	if(data == '\r' || data == '\n'){
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	8d 30       	cpi	r24, 0x0D	; 13
     3cc:	19 f0       	breq	.+6      	; 0x3d4 <__vector_18+0x40>
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	8a 30       	cpi	r24, 0x0A	; 10
     3d2:	61 f5       	brne	.+88     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		rx_Quebuff[rear][i] = '\0'; //문장의 끝을 알리는 null sign을 insert함.
     3d4:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <rear>
     3d8:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <rear+0x1>
     3dc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <i.2121>
     3e0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <i.2121+0x1>
     3e4:	48 e2       	ldi	r20, 0x28	; 40
     3e6:	42 9f       	mul	r20, r18
     3e8:	f0 01       	movw	r30, r0
     3ea:	43 9f       	mul	r20, r19
     3ec:	f0 0d       	add	r31, r0
     3ee:	11 24       	eor	r1, r1
     3f0:	eb 5c       	subi	r30, 0xCB	; 203
     3f2:	fe 4f       	sbci	r31, 0xFE	; 254
     3f4:	e8 0f       	add	r30, r24
     3f6:	f9 1f       	adc	r31, r25
     3f8:	10 82       	st	Z, r1
		i = 0; // i를 초기화 : 다음 문장을 입력받을 준비
     3fa:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <i.2121+0x1>
     3fe:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <i.2121>
		rear++;
     402:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rear>
     406:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <rear+0x1>
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <rear+0x1>
     410:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rear>
		rear %= COMMAND_NUMBER;
     414:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rear>
     418:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <rear+0x1>
     41c:	64 e1       	ldi	r22, 0x14	; 20
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	32 d3       	rcall	.+1636   	; 0xa86 <__divmodhi4>
     422:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <rear+0x1>
     426:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rear>
     42a:	1c c0       	rjmp	.+56     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		
		// Is queue full?
		
	}else{
		rx_Quebuff[rear][i++] = data;
     42c:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <rear>
     430:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <rear+0x1>
     434:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <i.2121>
     438:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <i.2121+0x1>
     43c:	9c 01       	movw	r18, r24
     43e:	2f 5f       	subi	r18, 0xFF	; 255
     440:	3f 4f       	sbci	r19, 0xFF	; 255
     442:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <i.2121+0x1>
     446:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <i.2121>
     44a:	49 81       	ldd	r20, Y+1	; 0x01
     44c:	58 e2       	ldi	r21, 0x28	; 40
     44e:	56 9f       	mul	r21, r22
     450:	90 01       	movw	r18, r0
     452:	57 9f       	mul	r21, r23
     454:	30 0d       	add	r19, r0
     456:	11 24       	eor	r1, r1
     458:	2b 5c       	subi	r18, 0xCB	; 203
     45a:	3e 4f       	sbci	r19, 0xFE	; 254
     45c:	f9 01       	movw	r30, r18
     45e:	e8 0f       	add	r30, r24
     460:	f9 1f       	adc	r31, r25
     462:	40 83       	st	Z, r20
	}
}
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	bf 91       	pop	r27
     470:	af 91       	pop	r26
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	7f 91       	pop	r23
     478:	6f 91       	pop	r22
     47a:	5f 91       	pop	r21
     47c:	4f 91       	pop	r20
     47e:	3f 91       	pop	r19
     480:	2f 91       	pop	r18
     482:	0f 90       	pop	r0
     484:	0b be       	out	0x3b, r0	; 59
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <init_uart0>:

void init_uart0(void){
	// 표 9-9(p.219)
	UBRR0H = 0x00;
     490:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; //9600bps설정하는것임 
     494:	8f ec       	ldi	r24, 0xCF	; 207
     496:	89 b9       	out	0x09, r24	; 9
	//data는 8bit고 non parity설정을하자 : UCSRnA레지스터
	
	UCSR0A |= 1 << U2X0; //2배속 통신
     498:	8b b1       	in	r24, 0x0b	; 11
     49a:	82 60       	ori	r24, 0x02	; 2
     49c:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // ASYNC(비동기) / data8bit / none parity
     49e:	e5 e9       	ldi	r30, 0x95	; 149
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	86 60       	ori	r24, 0x06	; 6
     4a6:	80 83       	st	Z, r24
	
	// RXEN0 : UART0로 부터 수신이 가능하도록 설정
	// TXEN0 : UART0로 부터 송신이 가능하도록 설정
	// RXCIEN0 : UART0로 부터 1byte가 들어오면(stopbit까지 수신완료된 상황)이면, rx 인터럽트를 발생시킨다.
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     4a8:	8a b1       	in	r24, 0x0a	; 10
     4aa:	88 69       	ori	r24, 0x98	; 152
     4ac:	8a b9       	out	0x0a, r24	; 10
     4ae:	08 95       	ret

000004b0 <UART0_transmit>:
}


//UART0를 1byte를 전송하는 함수
void UART0_transmit(uint8_t data){
	while(!(UCSR0A & 1 << UDRE0));
     4b0:	5d 9b       	sbis	0x0b, 5	; 11
     4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <UART0_transmit>
		// 우선순위가 << : 5, & : 8
		//UDRE0는 5비트위치
		//데이터가 전송중이면 전송이 끝날때 까지 기다린다.
		// no operation : NOP
		UDR0 = data; 
     4b4:	8c b9       	out	0x0c, r24	; 12
     4b6:	08 95       	ret

000004b8 <__vector_30>:
// ISR : HW와 SW의 만남의 장소, 인터럽트가 뜨면 여기로 들어와라
// 1byte를 수신 할때 마다 이곳으로 들어온다.
// 입력패턴예: led_all_on\n
volatile uint8_t uart1_rx_data = 0;
extern void UART0_transmit(uint8_t data);
ISR(USART1_RX_vect){
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	0b b6       	in	r0, 0x3b	; 59
     4c4:	0f 92       	push	r0
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	4f 93       	push	r20
     4cc:	5f 93       	push	r21
     4ce:	6f 93       	push	r22
     4d0:	7f 93       	push	r23
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31
	uart1_rx_data = UDR1; //UART1의 hardware register(UDR1)로 부터 1byte를 읽어간다.
     4de:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     4e2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <uart1_rx_data>
	UART0_transmit(uart1_rx_data);
     4e6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <uart1_rx_data>
     4ea:	e2 df       	rcall	.-60     	; 0x4b0 <UART0_transmit>
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0b be       	out	0x3b, r0	; 59
     508:	0f 90       	pop	r0
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	0f 90       	pop	r0
     50e:	1f 90       	pop	r1
     510:	18 95       	reti

00000512 <init_uart1>:

void init_uart1(void){
	// 표 9-9(p.219)
	UBRR1H = 0x00;
     512:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207; //9600bps설정하는것임
     516:	8f ec       	ldi	r24, 0xCF	; 207
     518:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	//data는 8bit고 non parity설정을하자 : UCSRnA레지스터
	
	UCSR1A |= 1 << U2X1; //2배속 통신
     51c:	eb e9       	ldi	r30, 0x9B	; 155
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	82 60       	ori	r24, 0x02	; 2
     524:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // ASYNC(비동기) / data8bit / none parity
     526:	ed e9       	ldi	r30, 0x9D	; 157
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	86 60       	ori	r24, 0x06	; 6
     52e:	80 83       	st	Z, r24
	
	// RXEN1 : UART1로 부터 수신이 가능하도록 설정
	// TXEN1 : UART1로 부터 송신이 가능하도록 설정
	// RXCIEN1 : UART1로 부터 1byte가 들어오면(stopbit까지 수신완료된 상황)이면, rx 인터럽트를 발생시킨다.
	UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     530:	ea e9       	ldi	r30, 0x9A	; 154
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	88 69       	ori	r24, 0x98	; 152
     538:	80 83       	st	Z, r24
     53a:	08 95       	ret

0000053c <__vector_5>:
char scm[50];

// ISR은 파일의 맨 위에 짜주는 것이 좋습니다.(중요하기 때문)
// PE4는 외부 INT4 초음파센서 상승,하강에지 둘다 이곳으로 들어온다.
// 결국은 상승에지에서 1번 / 하강에지에서 1번 2번 들어온다.
ISR(INT4_vect){
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	0b b6       	in	r0, 0x3b	; 59
     548:	0f 92       	push	r0
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	2f 93       	push	r18
     554:	3f 93       	push	r19
     556:	4f 93       	push	r20
     558:	5f 93       	push	r21
     55a:	6f 93       	push	r22
     55c:	7f 93       	push	r23
     55e:	8f 93       	push	r24
     560:	9f 93       	push	r25
     562:	af 93       	push	r26
     564:	bf 93       	push	r27
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	ef 93       	push	r30
     56c:	ff 93       	push	r31
	// 1.상승 에지일때 처리하는 부분
	// port echo핀의 4번핀이 1이 됫을때임
	if(ECHO_PIN & (1<<ECHO)){
     56e:	0c 9b       	sbis	0x01, 4	; 1
     570:	03 c0       	rjmp	.+6      	; 0x578 <__vector_5+0x3c>
		// 이때부터 길이를 재기 시작함(pulse를 몇개를 count했는지를 통해서)
		//카운트된 펄스값을 us로 환산하면 길이가 나온다
		TCNT1 = 0;
     572:	1d bc       	out	0x2d, r1	; 45
     574:	1c bc       	out	0x2c, r1	; 44
     576:	a6 c0       	rjmp	.+332    	; 0x6c4 <__vector_5+0x188>
	}else {
		// 2.하강 에지일때 처리하는 부분
		// port echo핀의 4번핀이 0이 됫을때임
		/* 에코핀에 들어오는 펄스 길이를 us단위로 환산한다 
		(1024로 분주하잖아요?) */
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
     578:	6c b5       	in	r22, 0x2c	; 44
     57a:	7d b5       	in	r23, 0x2d	; 45
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	69 d1       	rcall	.+722    	; 0x854 <__floatunsisf>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	34 e2       	ldi	r19, 0x24	; 36
     586:	44 e7       	ldi	r20, 0x74	; 116
     588:	59 e4       	ldi	r21, 0x49	; 73
     58a:	1a d2       	rcall	.+1076   	; 0x9c0 <__mulsf3>
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e8       	ldi	r20, 0x80	; 128
     592:	54 e4       	ldi	r21, 0x44	; 68
     594:	15 d2       	rcall	.+1066   	; 0x9c0 <__mulsf3>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	34 e2       	ldi	r19, 0x24	; 36
     59a:	44 e7       	ldi	r20, 0x74	; 116
     59c:	5b e4       	ldi	r21, 0x4B	; 75
     59e:	c1 d0       	rcall	.+386    	; 0x722 <__divsf3>
     5a0:	28 d1       	rcall	.+592    	; 0x7f2 <__fixsfsi>
     5a2:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <ultrasonic_distance+0x1>
     5a6:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <ultrasonic_distance>
		// 예) TCNT1에 10이 들어있다고 가정하자.
		// 15.625kHz의 1주기가 64us이다.
		// 0.000064 * 10 = 0.00064sec(640us)
		 // 640us / 58us = 11cm
		 // 1cm : 58us가 소요됨(왕복시간 반영)
		 sprintf(scm,"dis %dcm\n",ultrasonic_distance/58); //cm단위로 환산해준다
     5aa:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ultrasonic_distance>
     5ae:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ultrasonic_distance+0x1>
     5b2:	ca e3       	ldi	r28, 0x3A	; 58
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
     5b6:	be 01       	movw	r22, r28
     5b8:	66 d2       	rcall	.+1228   	; 0xa86 <__divmodhi4>
     5ba:	7f 93       	push	r23
     5bc:	6f 93       	push	r22
     5be:	8e e0       	ldi	r24, 0x0E	; 14
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	85 e5       	ldi	r24, 0x55	; 85
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	82 d2       	rcall	.+1284   	; 0xad4 <sprintf>
		 double distance =  ultrasonic_distance/58;
     5d0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ultrasonic_distance>
     5d4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ultrasonic_distance+0x1>
     5d8:	be 01       	movw	r22, r28
     5da:	55 d2       	rcall	.+1194   	; 0xa86 <__divmodhi4>
     5dc:	07 2e       	mov	r0, r23
     5de:	00 0c       	add	r0, r0
     5e0:	88 0b       	sbc	r24, r24
     5e2:	99 0b       	sbc	r25, r25
     5e4:	39 d1       	rcall	.+626    	; 0x858 <__floatsisf>
     5e6:	6b 01       	movw	r12, r22
     5e8:	7c 01       	movw	r14, r24
     5ea:	0f 90       	pop	r0
		 if(distance > 4 && distance <= 5){
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e8       	ldi	r20, 0x80	; 128
     5fc:	50 e4       	ldi	r21, 0x40	; 64
     5fe:	dc d1       	rcall	.+952    	; 0x9b8 <__gesf2>
     600:	18 16       	cp	r1, r24
     602:	64 f4       	brge	.+24     	; 0x61c <__vector_5+0xe0>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 ea       	ldi	r20, 0xA0	; 160
     60a:	50 e4       	ldi	r21, 0x40	; 64
     60c:	c7 01       	movw	r24, r14
     60e:	b6 01       	movw	r22, r12
     610:	84 d0       	rcall	.+264    	; 0x71a <__cmpsf2>
     612:	18 16       	cp	r1, r24
     614:	1c f0       	brlt	.+6      	; 0x61c <__vector_5+0xe0>
			LED_PORT = 0x1f;
     616:	8f e1       	ldi	r24, 0x1F	; 31
     618:	8b bb       	out	0x1b, r24	; 27
     61a:	54 c0       	rjmp	.+168    	; 0x6c4 <__vector_5+0x188>
		 }else if(distance >3 && distance <= 4){
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e4       	ldi	r20, 0x40	; 64
     622:	50 e4       	ldi	r21, 0x40	; 64
     624:	c7 01       	movw	r24, r14
     626:	b6 01       	movw	r22, r12
     628:	c7 d1       	rcall	.+910    	; 0x9b8 <__gesf2>
     62a:	18 16       	cp	r1, r24
     62c:	64 f4       	brge	.+24     	; 0x646 <__vector_5+0x10a>
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e8       	ldi	r20, 0x80	; 128
     634:	50 e4       	ldi	r21, 0x40	; 64
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	6f d0       	rcall	.+222    	; 0x71a <__cmpsf2>
     63c:	18 16       	cp	r1, r24
     63e:	1c f0       	brlt	.+6      	; 0x646 <__vector_5+0x10a>
			 LED_PORT = 0x0f;
     640:	8f e0       	ldi	r24, 0x0F	; 15
     642:	8b bb       	out	0x1b, r24	; 27
     644:	3f c0       	rjmp	.+126    	; 0x6c4 <__vector_5+0x188>
		 }else if(distance > 2 && distance <= 3){
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e4       	ldi	r21, 0x40	; 64
     64e:	c7 01       	movw	r24, r14
     650:	b6 01       	movw	r22, r12
     652:	b2 d1       	rcall	.+868    	; 0x9b8 <__gesf2>
     654:	18 16       	cp	r1, r24
     656:	64 f4       	brge	.+24     	; 0x670 <__vector_5+0x134>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e4       	ldi	r20, 0x40	; 64
     65e:	50 e4       	ldi	r21, 0x40	; 64
     660:	c7 01       	movw	r24, r14
     662:	b6 01       	movw	r22, r12
     664:	5a d0       	rcall	.+180    	; 0x71a <__cmpsf2>
     666:	18 16       	cp	r1, r24
     668:	1c f0       	brlt	.+6      	; 0x670 <__vector_5+0x134>
			 LED_PORT= 0x07;
     66a:	87 e0       	ldi	r24, 0x07	; 7
     66c:	8b bb       	out	0x1b, r24	; 27
     66e:	2a c0       	rjmp	.+84     	; 0x6c4 <__vector_5+0x188>
		 }else if(distance > 1 && distance <= 2){
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e8       	ldi	r20, 0x80	; 128
     676:	5f e3       	ldi	r21, 0x3F	; 63
     678:	c7 01       	movw	r24, r14
     67a:	b6 01       	movw	r22, r12
     67c:	9d d1       	rcall	.+826    	; 0x9b8 <__gesf2>
     67e:	18 16       	cp	r1, r24
     680:	64 f4       	brge	.+24     	; 0x69a <__vector_5+0x15e>
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	50 e4       	ldi	r21, 0x40	; 64
     68a:	c7 01       	movw	r24, r14
     68c:	b6 01       	movw	r22, r12
     68e:	45 d0       	rcall	.+138    	; 0x71a <__cmpsf2>
     690:	18 16       	cp	r1, r24
     692:	1c f0       	brlt	.+6      	; 0x69a <__vector_5+0x15e>
			 LED_PORT = 0x03;
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	8b bb       	out	0x1b, r24	; 27
		 }else if(distance > 0 && distance <= 1){
     698:	15 c0       	rjmp	.+42     	; 0x6c4 <__vector_5+0x188>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	a9 01       	movw	r20, r18
     6a0:	c7 01       	movw	r24, r14
     6a2:	b6 01       	movw	r22, r12
     6a4:	89 d1       	rcall	.+786    	; 0x9b8 <__gesf2>
     6a6:	18 16       	cp	r1, r24
     6a8:	64 f4       	brge	.+24     	; 0x6c2 <__vector_5+0x186>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e8       	ldi	r20, 0x80	; 128
     6b0:	5f e3       	ldi	r21, 0x3F	; 63
     6b2:	c7 01       	movw	r24, r14
     6b4:	b6 01       	movw	r22, r12
     6b6:	31 d0       	rcall	.+98     	; 0x71a <__cmpsf2>
     6b8:	18 16       	cp	r1, r24
     6ba:	1c f0       	brlt	.+6      	; 0x6c2 <__vector_5+0x186>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
			LED_PORT = 0x01;
     6be:	8b bb       	out	0x1b, r24	; 27
     6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <__vector_5+0x188>
     6c2:	1b ba       	out	0x1b, r1	; 27
		}else {
			 LED_PORT = 0x00;
     6c4:	ff 91       	pop	r31
		 }
	}
}
     6c6:	ef 91       	pop	r30
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	0f 90       	pop	r0
     6ea:	0b be       	out	0x3b, r0	; 59
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <init_ultrasonic>:
     6f6:	e4 e6       	ldi	r30, 0x64	; 100


void init_ultrasonic(){
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	80 61       	ori	r24, 0x10	; 16
     6fe:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); //input mode로 설정
     700:	82 b1       	in	r24, 0x02	; 2
     702:	8f 7e       	andi	r24, 0xEF	; 239
     704:	82 b9       	out	0x02, r24	; 2
	
	//p.289 표 12-6
	// 0 1로 해야 : 상승엣지, 하강엣지 둘다 INT를 뛰우도록 설정할 수 있음.
	EICRB |= 0 << ISC41 | 1 << ISC40;
     706:	8a b7       	in	r24, 0x3a	; 58
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	8a bf       	out	0x3a, r24	; 58
	// 16비트 타이머 1번을 설정을 해서 사용한다.
	// 16비트는 65535까지임
	// 16MHz clock
	// 16MHz를 1024 분주한다 16000000/1024 = 15625Hz = 15.625kHz
	// 1주기(1개의 pulse길이) T = 1/f = 1/15.625k = 0.000064 = 64us
	TCCR1B |= 1 << CS12 | 1 << CS10; //1024로 분주 설정 // timer1번 설정
     70c:	8e b5       	in	r24, 0x2e	; 46
     70e:	85 60       	ori	r24, 0x05	; 5
     710:	8e bd       	out	0x2e, r24	; 46
	
	EIMSK |= 1 << INT4; // 외부 INT4(ECHO)사용
     712:	89 b7       	in	r24, 0x39	; 57
     714:	80 61       	ori	r24, 0x10	; 16
     716:	89 bf       	out	0x39, r24	; 57
     718:	08 95       	ret

0000071a <__cmpsf2>:
     71a:	d9 d0       	rcall	.+434    	; 0x8ce <__fp_cmp>
     71c:	08 f4       	brcc	.+2      	; 0x720 <__cmpsf2+0x6>
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	08 95       	ret

00000722 <__divsf3>:
     722:	0c d0       	rcall	.+24     	; 0x73c <__divsf3x>
     724:	0f c1       	rjmp	.+542    	; 0x944 <__fp_round>
     726:	07 d1       	rcall	.+526    	; 0x936 <__fp_pscB>
     728:	40 f0       	brcs	.+16     	; 0x73a <__divsf3+0x18>
     72a:	fe d0       	rcall	.+508    	; 0x928 <__fp_pscA>
     72c:	30 f0       	brcs	.+12     	; 0x73a <__divsf3+0x18>
     72e:	21 f4       	brne	.+8      	; 0x738 <__divsf3+0x16>
     730:	5f 3f       	cpi	r21, 0xFF	; 255
     732:	19 f0       	breq	.+6      	; 0x73a <__divsf3+0x18>
     734:	f0 c0       	rjmp	.+480    	; 0x916 <__fp_inf>
     736:	51 11       	cpse	r21, r1
     738:	39 c1       	rjmp	.+626    	; 0x9ac <__fp_szero>
     73a:	f3 c0       	rjmp	.+486    	; 0x922 <__fp_nan>

0000073c <__divsf3x>:
     73c:	14 d1       	rcall	.+552    	; 0x966 <__fp_split3>
     73e:	98 f3       	brcs	.-26     	; 0x726 <__divsf3+0x4>

00000740 <__divsf3_pse>:
     740:	99 23       	and	r25, r25
     742:	c9 f3       	breq	.-14     	; 0x736 <__divsf3+0x14>
     744:	55 23       	and	r21, r21
     746:	b1 f3       	breq	.-20     	; 0x734 <__divsf3+0x12>
     748:	95 1b       	sub	r25, r21
     74a:	55 0b       	sbc	r21, r21
     74c:	bb 27       	eor	r27, r27
     74e:	aa 27       	eor	r26, r26
     750:	62 17       	cp	r22, r18
     752:	73 07       	cpc	r23, r19
     754:	84 07       	cpc	r24, r20
     756:	38 f0       	brcs	.+14     	; 0x766 <__divsf3_pse+0x26>
     758:	9f 5f       	subi	r25, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	22 0f       	add	r18, r18
     75e:	33 1f       	adc	r19, r19
     760:	44 1f       	adc	r20, r20
     762:	aa 1f       	adc	r26, r26
     764:	a9 f3       	breq	.-22     	; 0x750 <__divsf3_pse+0x10>
     766:	33 d0       	rcall	.+102    	; 0x7ce <__divsf3_pse+0x8e>
     768:	0e 2e       	mov	r0, r30
     76a:	3a f0       	brmi	.+14     	; 0x77a <__divsf3_pse+0x3a>
     76c:	e0 e8       	ldi	r30, 0x80	; 128
     76e:	30 d0       	rcall	.+96     	; 0x7d0 <__divsf3_pse+0x90>
     770:	91 50       	subi	r25, 0x01	; 1
     772:	50 40       	sbci	r21, 0x00	; 0
     774:	e6 95       	lsr	r30
     776:	00 1c       	adc	r0, r0
     778:	ca f7       	brpl	.-14     	; 0x76c <__divsf3_pse+0x2c>
     77a:	29 d0       	rcall	.+82     	; 0x7ce <__divsf3_pse+0x8e>
     77c:	fe 2f       	mov	r31, r30
     77e:	27 d0       	rcall	.+78     	; 0x7ce <__divsf3_pse+0x8e>
     780:	66 0f       	add	r22, r22
     782:	77 1f       	adc	r23, r23
     784:	88 1f       	adc	r24, r24
     786:	bb 1f       	adc	r27, r27
     788:	26 17       	cp	r18, r22
     78a:	37 07       	cpc	r19, r23
     78c:	48 07       	cpc	r20, r24
     78e:	ab 07       	cpc	r26, r27
     790:	b0 e8       	ldi	r27, 0x80	; 128
     792:	09 f0       	breq	.+2      	; 0x796 <__divsf3_pse+0x56>
     794:	bb 0b       	sbc	r27, r27
     796:	80 2d       	mov	r24, r0
     798:	bf 01       	movw	r22, r30
     79a:	ff 27       	eor	r31, r31
     79c:	93 58       	subi	r25, 0x83	; 131
     79e:	5f 4f       	sbci	r21, 0xFF	; 255
     7a0:	2a f0       	brmi	.+10     	; 0x7ac <__divsf3_pse+0x6c>
     7a2:	9e 3f       	cpi	r25, 0xFE	; 254
     7a4:	51 05       	cpc	r21, r1
     7a6:	68 f0       	brcs	.+26     	; 0x7c2 <__divsf3_pse+0x82>
     7a8:	b6 c0       	rjmp	.+364    	; 0x916 <__fp_inf>
     7aa:	00 c1       	rjmp	.+512    	; 0x9ac <__fp_szero>
     7ac:	5f 3f       	cpi	r21, 0xFF	; 255
     7ae:	ec f3       	brlt	.-6      	; 0x7aa <__divsf3_pse+0x6a>
     7b0:	98 3e       	cpi	r25, 0xE8	; 232
     7b2:	dc f3       	brlt	.-10     	; 0x7aa <__divsf3_pse+0x6a>
     7b4:	86 95       	lsr	r24
     7b6:	77 95       	ror	r23
     7b8:	67 95       	ror	r22
     7ba:	b7 95       	ror	r27
     7bc:	f7 95       	ror	r31
     7be:	9f 5f       	subi	r25, 0xFF	; 255
     7c0:	c9 f7       	brne	.-14     	; 0x7b4 <__divsf3_pse+0x74>
     7c2:	88 0f       	add	r24, r24
     7c4:	91 1d       	adc	r25, r1
     7c6:	96 95       	lsr	r25
     7c8:	87 95       	ror	r24
     7ca:	97 f9       	bld	r25, 7
     7cc:	08 95       	ret
     7ce:	e1 e0       	ldi	r30, 0x01	; 1
     7d0:	66 0f       	add	r22, r22
     7d2:	77 1f       	adc	r23, r23
     7d4:	88 1f       	adc	r24, r24
     7d6:	bb 1f       	adc	r27, r27
     7d8:	62 17       	cp	r22, r18
     7da:	73 07       	cpc	r23, r19
     7dc:	84 07       	cpc	r24, r20
     7de:	ba 07       	cpc	r27, r26
     7e0:	20 f0       	brcs	.+8      	; 0x7ea <__divsf3_pse+0xaa>
     7e2:	62 1b       	sub	r22, r18
     7e4:	73 0b       	sbc	r23, r19
     7e6:	84 0b       	sbc	r24, r20
     7e8:	ba 0b       	sbc	r27, r26
     7ea:	ee 1f       	adc	r30, r30
     7ec:	88 f7       	brcc	.-30     	; 0x7d0 <__divsf3_pse+0x90>
     7ee:	e0 95       	com	r30
     7f0:	08 95       	ret

000007f2 <__fixsfsi>:
     7f2:	04 d0       	rcall	.+8      	; 0x7fc <__fixunssfsi>
     7f4:	68 94       	set
     7f6:	b1 11       	cpse	r27, r1
     7f8:	d9 c0       	rjmp	.+434    	; 0x9ac <__fp_szero>
     7fa:	08 95       	ret

000007fc <__fixunssfsi>:
     7fc:	bc d0       	rcall	.+376    	; 0x976 <__fp_splitA>
     7fe:	88 f0       	brcs	.+34     	; 0x822 <__fixunssfsi+0x26>
     800:	9f 57       	subi	r25, 0x7F	; 127
     802:	90 f0       	brcs	.+36     	; 0x828 <__fixunssfsi+0x2c>
     804:	b9 2f       	mov	r27, r25
     806:	99 27       	eor	r25, r25
     808:	b7 51       	subi	r27, 0x17	; 23
     80a:	a0 f0       	brcs	.+40     	; 0x834 <__fixunssfsi+0x38>
     80c:	d1 f0       	breq	.+52     	; 0x842 <__fixunssfsi+0x46>
     80e:	66 0f       	add	r22, r22
     810:	77 1f       	adc	r23, r23
     812:	88 1f       	adc	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	1a f0       	brmi	.+6      	; 0x81e <__fixunssfsi+0x22>
     818:	ba 95       	dec	r27
     81a:	c9 f7       	brne	.-14     	; 0x80e <__fixunssfsi+0x12>
     81c:	12 c0       	rjmp	.+36     	; 0x842 <__fixunssfsi+0x46>
     81e:	b1 30       	cpi	r27, 0x01	; 1
     820:	81 f0       	breq	.+32     	; 0x842 <__fixunssfsi+0x46>
     822:	c3 d0       	rcall	.+390    	; 0x9aa <__fp_zero>
     824:	b1 e0       	ldi	r27, 0x01	; 1
     826:	08 95       	ret
     828:	c0 c0       	rjmp	.+384    	; 0x9aa <__fp_zero>
     82a:	67 2f       	mov	r22, r23
     82c:	78 2f       	mov	r23, r24
     82e:	88 27       	eor	r24, r24
     830:	b8 5f       	subi	r27, 0xF8	; 248
     832:	39 f0       	breq	.+14     	; 0x842 <__fixunssfsi+0x46>
     834:	b9 3f       	cpi	r27, 0xF9	; 249
     836:	cc f3       	brlt	.-14     	; 0x82a <__fixunssfsi+0x2e>
     838:	86 95       	lsr	r24
     83a:	77 95       	ror	r23
     83c:	67 95       	ror	r22
     83e:	b3 95       	inc	r27
     840:	d9 f7       	brne	.-10     	; 0x838 <__fixunssfsi+0x3c>
     842:	3e f4       	brtc	.+14     	; 0x852 <__fixunssfsi+0x56>
     844:	90 95       	com	r25
     846:	80 95       	com	r24
     848:	70 95       	com	r23
     84a:	61 95       	neg	r22
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	8f 4f       	sbci	r24, 0xFF	; 255
     850:	9f 4f       	sbci	r25, 0xFF	; 255
     852:	08 95       	ret

00000854 <__floatunsisf>:
     854:	e8 94       	clt
     856:	09 c0       	rjmp	.+18     	; 0x86a <__floatsisf+0x12>

00000858 <__floatsisf>:
     858:	97 fb       	bst	r25, 7
     85a:	3e f4       	brtc	.+14     	; 0x86a <__floatsisf+0x12>
     85c:	90 95       	com	r25
     85e:	80 95       	com	r24
     860:	70 95       	com	r23
     862:	61 95       	neg	r22
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	8f 4f       	sbci	r24, 0xFF	; 255
     868:	9f 4f       	sbci	r25, 0xFF	; 255
     86a:	99 23       	and	r25, r25
     86c:	a9 f0       	breq	.+42     	; 0x898 <__floatsisf+0x40>
     86e:	f9 2f       	mov	r31, r25
     870:	96 e9       	ldi	r25, 0x96	; 150
     872:	bb 27       	eor	r27, r27
     874:	93 95       	inc	r25
     876:	f6 95       	lsr	r31
     878:	87 95       	ror	r24
     87a:	77 95       	ror	r23
     87c:	67 95       	ror	r22
     87e:	b7 95       	ror	r27
     880:	f1 11       	cpse	r31, r1
     882:	f8 cf       	rjmp	.-16     	; 0x874 <__floatsisf+0x1c>
     884:	fa f4       	brpl	.+62     	; 0x8c4 <__floatsisf+0x6c>
     886:	bb 0f       	add	r27, r27
     888:	11 f4       	brne	.+4      	; 0x88e <__floatsisf+0x36>
     88a:	60 ff       	sbrs	r22, 0
     88c:	1b c0       	rjmp	.+54     	; 0x8c4 <__floatsisf+0x6c>
     88e:	6f 5f       	subi	r22, 0xFF	; 255
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	8f 4f       	sbci	r24, 0xFF	; 255
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	16 c0       	rjmp	.+44     	; 0x8c4 <__floatsisf+0x6c>
     898:	88 23       	and	r24, r24
     89a:	11 f0       	breq	.+4      	; 0x8a0 <__floatsisf+0x48>
     89c:	96 e9       	ldi	r25, 0x96	; 150
     89e:	11 c0       	rjmp	.+34     	; 0x8c2 <__floatsisf+0x6a>
     8a0:	77 23       	and	r23, r23
     8a2:	21 f0       	breq	.+8      	; 0x8ac <__floatsisf+0x54>
     8a4:	9e e8       	ldi	r25, 0x8E	; 142
     8a6:	87 2f       	mov	r24, r23
     8a8:	76 2f       	mov	r23, r22
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <__floatsisf+0x5e>
     8ac:	66 23       	and	r22, r22
     8ae:	71 f0       	breq	.+28     	; 0x8cc <__floatsisf+0x74>
     8b0:	96 e8       	ldi	r25, 0x86	; 134
     8b2:	86 2f       	mov	r24, r22
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	2a f0       	brmi	.+10     	; 0x8c4 <__floatsisf+0x6c>
     8ba:	9a 95       	dec	r25
     8bc:	66 0f       	add	r22, r22
     8be:	77 1f       	adc	r23, r23
     8c0:	88 1f       	adc	r24, r24
     8c2:	da f7       	brpl	.-10     	; 0x8ba <__floatsisf+0x62>
     8c4:	88 0f       	add	r24, r24
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	97 f9       	bld	r25, 7
     8cc:	08 95       	ret

000008ce <__fp_cmp>:
     8ce:	99 0f       	add	r25, r25
     8d0:	00 08       	sbc	r0, r0
     8d2:	55 0f       	add	r21, r21
     8d4:	aa 0b       	sbc	r26, r26
     8d6:	e0 e8       	ldi	r30, 0x80	; 128
     8d8:	fe ef       	ldi	r31, 0xFE	; 254
     8da:	16 16       	cp	r1, r22
     8dc:	17 06       	cpc	r1, r23
     8de:	e8 07       	cpc	r30, r24
     8e0:	f9 07       	cpc	r31, r25
     8e2:	c0 f0       	brcs	.+48     	; 0x914 <__fp_cmp+0x46>
     8e4:	12 16       	cp	r1, r18
     8e6:	13 06       	cpc	r1, r19
     8e8:	e4 07       	cpc	r30, r20
     8ea:	f5 07       	cpc	r31, r21
     8ec:	98 f0       	brcs	.+38     	; 0x914 <__fp_cmp+0x46>
     8ee:	62 1b       	sub	r22, r18
     8f0:	73 0b       	sbc	r23, r19
     8f2:	84 0b       	sbc	r24, r20
     8f4:	95 0b       	sbc	r25, r21
     8f6:	39 f4       	brne	.+14     	; 0x906 <__fp_cmp+0x38>
     8f8:	0a 26       	eor	r0, r26
     8fa:	61 f0       	breq	.+24     	; 0x914 <__fp_cmp+0x46>
     8fc:	23 2b       	or	r18, r19
     8fe:	24 2b       	or	r18, r20
     900:	25 2b       	or	r18, r21
     902:	21 f4       	brne	.+8      	; 0x90c <__fp_cmp+0x3e>
     904:	08 95       	ret
     906:	0a 26       	eor	r0, r26
     908:	09 f4       	brne	.+2      	; 0x90c <__fp_cmp+0x3e>
     90a:	a1 40       	sbci	r26, 0x01	; 1
     90c:	a6 95       	lsr	r26
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	81 1d       	adc	r24, r1
     912:	81 1d       	adc	r24, r1
     914:	08 95       	ret

00000916 <__fp_inf>:
     916:	97 f9       	bld	r25, 7
     918:	9f 67       	ori	r25, 0x7F	; 127
     91a:	80 e8       	ldi	r24, 0x80	; 128
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	08 95       	ret

00000922 <__fp_nan>:
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	80 ec       	ldi	r24, 0xC0	; 192
     926:	08 95       	ret

00000928 <__fp_pscA>:
     928:	00 24       	eor	r0, r0
     92a:	0a 94       	dec	r0
     92c:	16 16       	cp	r1, r22
     92e:	17 06       	cpc	r1, r23
     930:	18 06       	cpc	r1, r24
     932:	09 06       	cpc	r0, r25
     934:	08 95       	ret

00000936 <__fp_pscB>:
     936:	00 24       	eor	r0, r0
     938:	0a 94       	dec	r0
     93a:	12 16       	cp	r1, r18
     93c:	13 06       	cpc	r1, r19
     93e:	14 06       	cpc	r1, r20
     940:	05 06       	cpc	r0, r21
     942:	08 95       	ret

00000944 <__fp_round>:
     944:	09 2e       	mov	r0, r25
     946:	03 94       	inc	r0
     948:	00 0c       	add	r0, r0
     94a:	11 f4       	brne	.+4      	; 0x950 <__fp_round+0xc>
     94c:	88 23       	and	r24, r24
     94e:	52 f0       	brmi	.+20     	; 0x964 <__fp_round+0x20>
     950:	bb 0f       	add	r27, r27
     952:	40 f4       	brcc	.+16     	; 0x964 <__fp_round+0x20>
     954:	bf 2b       	or	r27, r31
     956:	11 f4       	brne	.+4      	; 0x95c <__fp_round+0x18>
     958:	60 ff       	sbrs	r22, 0
     95a:	04 c0       	rjmp	.+8      	; 0x964 <__fp_round+0x20>
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	8f 4f       	sbci	r24, 0xFF	; 255
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	08 95       	ret

00000966 <__fp_split3>:
     966:	57 fd       	sbrc	r21, 7
     968:	90 58       	subi	r25, 0x80	; 128
     96a:	44 0f       	add	r20, r20
     96c:	55 1f       	adc	r21, r21
     96e:	59 f0       	breq	.+22     	; 0x986 <__fp_splitA+0x10>
     970:	5f 3f       	cpi	r21, 0xFF	; 255
     972:	71 f0       	breq	.+28     	; 0x990 <__fp_splitA+0x1a>
     974:	47 95       	ror	r20

00000976 <__fp_splitA>:
     976:	88 0f       	add	r24, r24
     978:	97 fb       	bst	r25, 7
     97a:	99 1f       	adc	r25, r25
     97c:	61 f0       	breq	.+24     	; 0x996 <__fp_splitA+0x20>
     97e:	9f 3f       	cpi	r25, 0xFF	; 255
     980:	79 f0       	breq	.+30     	; 0x9a0 <__fp_splitA+0x2a>
     982:	87 95       	ror	r24
     984:	08 95       	ret
     986:	12 16       	cp	r1, r18
     988:	13 06       	cpc	r1, r19
     98a:	14 06       	cpc	r1, r20
     98c:	55 1f       	adc	r21, r21
     98e:	f2 cf       	rjmp	.-28     	; 0x974 <__fp_split3+0xe>
     990:	46 95       	lsr	r20
     992:	f1 df       	rcall	.-30     	; 0x976 <__fp_splitA>
     994:	08 c0       	rjmp	.+16     	; 0x9a6 <__fp_splitA+0x30>
     996:	16 16       	cp	r1, r22
     998:	17 06       	cpc	r1, r23
     99a:	18 06       	cpc	r1, r24
     99c:	99 1f       	adc	r25, r25
     99e:	f1 cf       	rjmp	.-30     	; 0x982 <__fp_splitA+0xc>
     9a0:	86 95       	lsr	r24
     9a2:	71 05       	cpc	r23, r1
     9a4:	61 05       	cpc	r22, r1
     9a6:	08 94       	sec
     9a8:	08 95       	ret

000009aa <__fp_zero>:
     9aa:	e8 94       	clt

000009ac <__fp_szero>:
     9ac:	bb 27       	eor	r27, r27
     9ae:	66 27       	eor	r22, r22
     9b0:	77 27       	eor	r23, r23
     9b2:	cb 01       	movw	r24, r22
     9b4:	97 f9       	bld	r25, 7
     9b6:	08 95       	ret

000009b8 <__gesf2>:
     9b8:	8a df       	rcall	.-236    	; 0x8ce <__fp_cmp>
     9ba:	08 f4       	brcc	.+2      	; 0x9be <__gesf2+0x6>
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	08 95       	ret

000009c0 <__mulsf3>:
     9c0:	0b d0       	rcall	.+22     	; 0x9d8 <__mulsf3x>
     9c2:	c0 cf       	rjmp	.-128    	; 0x944 <__fp_round>
     9c4:	b1 df       	rcall	.-158    	; 0x928 <__fp_pscA>
     9c6:	28 f0       	brcs	.+10     	; 0x9d2 <__mulsf3+0x12>
     9c8:	b6 df       	rcall	.-148    	; 0x936 <__fp_pscB>
     9ca:	18 f0       	brcs	.+6      	; 0x9d2 <__mulsf3+0x12>
     9cc:	95 23       	and	r25, r21
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <__mulsf3+0x12>
     9d0:	a2 cf       	rjmp	.-188    	; 0x916 <__fp_inf>
     9d2:	a7 cf       	rjmp	.-178    	; 0x922 <__fp_nan>
     9d4:	11 24       	eor	r1, r1
     9d6:	ea cf       	rjmp	.-44     	; 0x9ac <__fp_szero>

000009d8 <__mulsf3x>:
     9d8:	c6 df       	rcall	.-116    	; 0x966 <__fp_split3>
     9da:	a0 f3       	brcs	.-24     	; 0x9c4 <__mulsf3+0x4>

000009dc <__mulsf3_pse>:
     9dc:	95 9f       	mul	r25, r21
     9de:	d1 f3       	breq	.-12     	; 0x9d4 <__mulsf3+0x14>
     9e0:	95 0f       	add	r25, r21
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	55 1f       	adc	r21, r21
     9e6:	62 9f       	mul	r22, r18
     9e8:	f0 01       	movw	r30, r0
     9ea:	72 9f       	mul	r23, r18
     9ec:	bb 27       	eor	r27, r27
     9ee:	f0 0d       	add	r31, r0
     9f0:	b1 1d       	adc	r27, r1
     9f2:	63 9f       	mul	r22, r19
     9f4:	aa 27       	eor	r26, r26
     9f6:	f0 0d       	add	r31, r0
     9f8:	b1 1d       	adc	r27, r1
     9fa:	aa 1f       	adc	r26, r26
     9fc:	64 9f       	mul	r22, r20
     9fe:	66 27       	eor	r22, r22
     a00:	b0 0d       	add	r27, r0
     a02:	a1 1d       	adc	r26, r1
     a04:	66 1f       	adc	r22, r22
     a06:	82 9f       	mul	r24, r18
     a08:	22 27       	eor	r18, r18
     a0a:	b0 0d       	add	r27, r0
     a0c:	a1 1d       	adc	r26, r1
     a0e:	62 1f       	adc	r22, r18
     a10:	73 9f       	mul	r23, r19
     a12:	b0 0d       	add	r27, r0
     a14:	a1 1d       	adc	r26, r1
     a16:	62 1f       	adc	r22, r18
     a18:	83 9f       	mul	r24, r19
     a1a:	a0 0d       	add	r26, r0
     a1c:	61 1d       	adc	r22, r1
     a1e:	22 1f       	adc	r18, r18
     a20:	74 9f       	mul	r23, r20
     a22:	33 27       	eor	r19, r19
     a24:	a0 0d       	add	r26, r0
     a26:	61 1d       	adc	r22, r1
     a28:	23 1f       	adc	r18, r19
     a2a:	84 9f       	mul	r24, r20
     a2c:	60 0d       	add	r22, r0
     a2e:	21 1d       	adc	r18, r1
     a30:	82 2f       	mov	r24, r18
     a32:	76 2f       	mov	r23, r22
     a34:	6a 2f       	mov	r22, r26
     a36:	11 24       	eor	r1, r1
     a38:	9f 57       	subi	r25, 0x7F	; 127
     a3a:	50 40       	sbci	r21, 0x00	; 0
     a3c:	8a f0       	brmi	.+34     	; 0xa60 <__mulsf3_pse+0x84>
     a3e:	e1 f0       	breq	.+56     	; 0xa78 <__mulsf3_pse+0x9c>
     a40:	88 23       	and	r24, r24
     a42:	4a f0       	brmi	.+18     	; 0xa56 <__mulsf3_pse+0x7a>
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	bb 1f       	adc	r27, r27
     a4a:	66 1f       	adc	r22, r22
     a4c:	77 1f       	adc	r23, r23
     a4e:	88 1f       	adc	r24, r24
     a50:	91 50       	subi	r25, 0x01	; 1
     a52:	50 40       	sbci	r21, 0x00	; 0
     a54:	a9 f7       	brne	.-22     	; 0xa40 <__mulsf3_pse+0x64>
     a56:	9e 3f       	cpi	r25, 0xFE	; 254
     a58:	51 05       	cpc	r21, r1
     a5a:	70 f0       	brcs	.+28     	; 0xa78 <__mulsf3_pse+0x9c>
     a5c:	5c cf       	rjmp	.-328    	; 0x916 <__fp_inf>
     a5e:	a6 cf       	rjmp	.-180    	; 0x9ac <__fp_szero>
     a60:	5f 3f       	cpi	r21, 0xFF	; 255
     a62:	ec f3       	brlt	.-6      	; 0xa5e <__mulsf3_pse+0x82>
     a64:	98 3e       	cpi	r25, 0xE8	; 232
     a66:	dc f3       	brlt	.-10     	; 0xa5e <__mulsf3_pse+0x82>
     a68:	86 95       	lsr	r24
     a6a:	77 95       	ror	r23
     a6c:	67 95       	ror	r22
     a6e:	b7 95       	ror	r27
     a70:	f7 95       	ror	r31
     a72:	e7 95       	ror	r30
     a74:	9f 5f       	subi	r25, 0xFF	; 255
     a76:	c1 f7       	brne	.-16     	; 0xa68 <__mulsf3_pse+0x8c>
     a78:	fe 2b       	or	r31, r30
     a7a:	88 0f       	add	r24, r24
     a7c:	91 1d       	adc	r25, r1
     a7e:	96 95       	lsr	r25
     a80:	87 95       	ror	r24
     a82:	97 f9       	bld	r25, 7
     a84:	08 95       	ret

00000a86 <__divmodhi4>:
     a86:	97 fb       	bst	r25, 7
     a88:	07 2e       	mov	r0, r23
     a8a:	16 f4       	brtc	.+4      	; 0xa90 <__divmodhi4+0xa>
     a8c:	00 94       	com	r0
     a8e:	06 d0       	rcall	.+12     	; 0xa9c <__divmodhi4_neg1>
     a90:	77 fd       	sbrc	r23, 7
     a92:	08 d0       	rcall	.+16     	; 0xaa4 <__divmodhi4_neg2>
     a94:	0b d0       	rcall	.+22     	; 0xaac <__udivmodhi4>
     a96:	07 fc       	sbrc	r0, 7
     a98:	05 d0       	rcall	.+10     	; 0xaa4 <__divmodhi4_neg2>
     a9a:	3e f4       	brtc	.+14     	; 0xaaa <__divmodhi4_exit>

00000a9c <__divmodhi4_neg1>:
     a9c:	90 95       	com	r25
     a9e:	81 95       	neg	r24
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	08 95       	ret

00000aa4 <__divmodhi4_neg2>:
     aa4:	70 95       	com	r23
     aa6:	61 95       	neg	r22
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255

00000aaa <__divmodhi4_exit>:
     aaa:	08 95       	ret

00000aac <__udivmodhi4>:
     aac:	aa 1b       	sub	r26, r26
     aae:	bb 1b       	sub	r27, r27
     ab0:	51 e1       	ldi	r21, 0x11	; 17
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <__udivmodhi4_ep>

00000ab4 <__udivmodhi4_loop>:
     ab4:	aa 1f       	adc	r26, r26
     ab6:	bb 1f       	adc	r27, r27
     ab8:	a6 17       	cp	r26, r22
     aba:	b7 07       	cpc	r27, r23
     abc:	10 f0       	brcs	.+4      	; 0xac2 <__udivmodhi4_ep>
     abe:	a6 1b       	sub	r26, r22
     ac0:	b7 0b       	sbc	r27, r23

00000ac2 <__udivmodhi4_ep>:
     ac2:	88 1f       	adc	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	5a 95       	dec	r21
     ac8:	a9 f7       	brne	.-22     	; 0xab4 <__udivmodhi4_loop>
     aca:	80 95       	com	r24
     acc:	90 95       	com	r25
     ace:	bc 01       	movw	r22, r24
     ad0:	cd 01       	movw	r24, r26
     ad2:	08 95       	ret

00000ad4 <sprintf>:
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	2e 97       	sbiw	r28, 0x0e	; 14
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	0d 89       	ldd	r16, Y+21	; 0x15
     aee:	1e 89       	ldd	r17, Y+22	; 0x16
     af0:	86 e0       	ldi	r24, 0x06	; 6
     af2:	8c 83       	std	Y+4, r24	; 0x04
     af4:	1a 83       	std	Y+2, r17	; 0x02
     af6:	09 83       	std	Y+1, r16	; 0x01
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	9f e7       	ldi	r25, 0x7F	; 127
     afc:	9e 83       	std	Y+6, r25	; 0x06
     afe:	8d 83       	std	Y+5, r24	; 0x05
     b00:	ae 01       	movw	r20, r28
     b02:	47 5e       	subi	r20, 0xE7	; 231
     b04:	5f 4f       	sbci	r21, 0xFF	; 255
     b06:	6f 89       	ldd	r22, Y+23	; 0x17
     b08:	78 8d       	ldd	r23, Y+24	; 0x18
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	10 d0       	rcall	.+32     	; 0xb30 <vfprintf>
     b10:	ef 81       	ldd	r30, Y+7	; 0x07
     b12:	f8 85       	ldd	r31, Y+8	; 0x08
     b14:	e0 0f       	add	r30, r16
     b16:	f1 1f       	adc	r31, r17
     b18:	10 82       	st	Z, r1
     b1a:	2e 96       	adiw	r28, 0x0e	; 14
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	08 95       	ret

00000b30 <vfprintf>:
     b30:	2f 92       	push	r2
     b32:	3f 92       	push	r3
     b34:	4f 92       	push	r4
     b36:	5f 92       	push	r5
     b38:	6f 92       	push	r6
     b3a:	7f 92       	push	r7
     b3c:	8f 92       	push	r8
     b3e:	9f 92       	push	r9
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	2b 97       	sbiw	r28, 0x0b	; 11
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	6c 01       	movw	r12, r24
     b66:	7b 01       	movw	r14, r22
     b68:	8a 01       	movw	r16, r20
     b6a:	fc 01       	movw	r30, r24
     b6c:	17 82       	std	Z+7, r1	; 0x07
     b6e:	16 82       	std	Z+6, r1	; 0x06
     b70:	83 81       	ldd	r24, Z+3	; 0x03
     b72:	81 ff       	sbrs	r24, 1
     b74:	bf c1       	rjmp	.+894    	; 0xef4 <vfprintf+0x3c4>
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	3c 01       	movw	r6, r24
     b7c:	f6 01       	movw	r30, r12
     b7e:	93 81       	ldd	r25, Z+3	; 0x03
     b80:	f7 01       	movw	r30, r14
     b82:	93 fd       	sbrc	r25, 3
     b84:	85 91       	lpm	r24, Z+
     b86:	93 ff       	sbrs	r25, 3
     b88:	81 91       	ld	r24, Z+
     b8a:	7f 01       	movw	r14, r30
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <vfprintf+0x62>
     b90:	ad c1       	rjmp	.+858    	; 0xeec <vfprintf+0x3bc>
     b92:	85 32       	cpi	r24, 0x25	; 37
     b94:	39 f4       	brne	.+14     	; 0xba4 <vfprintf+0x74>
     b96:	93 fd       	sbrc	r25, 3
     b98:	85 91       	lpm	r24, Z+
     b9a:	93 ff       	sbrs	r25, 3
     b9c:	81 91       	ld	r24, Z+
     b9e:	7f 01       	movw	r14, r30
     ba0:	85 32       	cpi	r24, 0x25	; 37
     ba2:	21 f4       	brne	.+8      	; 0xbac <vfprintf+0x7c>
     ba4:	b6 01       	movw	r22, r12
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	d6 d1       	rcall	.+940    	; 0xf56 <fputc>
     baa:	e8 cf       	rjmp	.-48     	; 0xb7c <vfprintf+0x4c>
     bac:	91 2c       	mov	r9, r1
     bae:	21 2c       	mov	r2, r1
     bb0:	31 2c       	mov	r3, r1
     bb2:	ff e1       	ldi	r31, 0x1F	; 31
     bb4:	f3 15       	cp	r31, r3
     bb6:	d8 f0       	brcs	.+54     	; 0xbee <vfprintf+0xbe>
     bb8:	8b 32       	cpi	r24, 0x2B	; 43
     bba:	79 f0       	breq	.+30     	; 0xbda <vfprintf+0xaa>
     bbc:	38 f4       	brcc	.+14     	; 0xbcc <vfprintf+0x9c>
     bbe:	80 32       	cpi	r24, 0x20	; 32
     bc0:	79 f0       	breq	.+30     	; 0xbe0 <vfprintf+0xb0>
     bc2:	83 32       	cpi	r24, 0x23	; 35
     bc4:	a1 f4       	brne	.+40     	; 0xbee <vfprintf+0xbe>
     bc6:	23 2d       	mov	r18, r3
     bc8:	20 61       	ori	r18, 0x10	; 16
     bca:	1d c0       	rjmp	.+58     	; 0xc06 <vfprintf+0xd6>
     bcc:	8d 32       	cpi	r24, 0x2D	; 45
     bce:	61 f0       	breq	.+24     	; 0xbe8 <vfprintf+0xb8>
     bd0:	80 33       	cpi	r24, 0x30	; 48
     bd2:	69 f4       	brne	.+26     	; 0xbee <vfprintf+0xbe>
     bd4:	23 2d       	mov	r18, r3
     bd6:	21 60       	ori	r18, 0x01	; 1
     bd8:	16 c0       	rjmp	.+44     	; 0xc06 <vfprintf+0xd6>
     bda:	83 2d       	mov	r24, r3
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	38 2e       	mov	r3, r24
     be0:	e3 2d       	mov	r30, r3
     be2:	e4 60       	ori	r30, 0x04	; 4
     be4:	3e 2e       	mov	r3, r30
     be6:	2a c0       	rjmp	.+84     	; 0xc3c <vfprintf+0x10c>
     be8:	f3 2d       	mov	r31, r3
     bea:	f8 60       	ori	r31, 0x08	; 8
     bec:	1d c0       	rjmp	.+58     	; 0xc28 <vfprintf+0xf8>
     bee:	37 fc       	sbrc	r3, 7
     bf0:	2d c0       	rjmp	.+90     	; 0xc4c <vfprintf+0x11c>
     bf2:	20 ed       	ldi	r18, 0xD0	; 208
     bf4:	28 0f       	add	r18, r24
     bf6:	2a 30       	cpi	r18, 0x0A	; 10
     bf8:	40 f0       	brcs	.+16     	; 0xc0a <vfprintf+0xda>
     bfa:	8e 32       	cpi	r24, 0x2E	; 46
     bfc:	b9 f4       	brne	.+46     	; 0xc2c <vfprintf+0xfc>
     bfe:	36 fc       	sbrc	r3, 6
     c00:	75 c1       	rjmp	.+746    	; 0xeec <vfprintf+0x3bc>
     c02:	23 2d       	mov	r18, r3
     c04:	20 64       	ori	r18, 0x40	; 64
     c06:	32 2e       	mov	r3, r18
     c08:	19 c0       	rjmp	.+50     	; 0xc3c <vfprintf+0x10c>
     c0a:	36 fe       	sbrs	r3, 6
     c0c:	06 c0       	rjmp	.+12     	; 0xc1a <vfprintf+0xea>
     c0e:	8a e0       	ldi	r24, 0x0A	; 10
     c10:	98 9e       	mul	r9, r24
     c12:	20 0d       	add	r18, r0
     c14:	11 24       	eor	r1, r1
     c16:	92 2e       	mov	r9, r18
     c18:	11 c0       	rjmp	.+34     	; 0xc3c <vfprintf+0x10c>
     c1a:	ea e0       	ldi	r30, 0x0A	; 10
     c1c:	2e 9e       	mul	r2, r30
     c1e:	20 0d       	add	r18, r0
     c20:	11 24       	eor	r1, r1
     c22:	22 2e       	mov	r2, r18
     c24:	f3 2d       	mov	r31, r3
     c26:	f0 62       	ori	r31, 0x20	; 32
     c28:	3f 2e       	mov	r3, r31
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <vfprintf+0x10c>
     c2c:	8c 36       	cpi	r24, 0x6C	; 108
     c2e:	21 f4       	brne	.+8      	; 0xc38 <vfprintf+0x108>
     c30:	83 2d       	mov	r24, r3
     c32:	80 68       	ori	r24, 0x80	; 128
     c34:	38 2e       	mov	r3, r24
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x10c>
     c38:	88 36       	cpi	r24, 0x68	; 104
     c3a:	41 f4       	brne	.+16     	; 0xc4c <vfprintf+0x11c>
     c3c:	f7 01       	movw	r30, r14
     c3e:	93 fd       	sbrc	r25, 3
     c40:	85 91       	lpm	r24, Z+
     c42:	93 ff       	sbrs	r25, 3
     c44:	81 91       	ld	r24, Z+
     c46:	7f 01       	movw	r14, r30
     c48:	81 11       	cpse	r24, r1
     c4a:	b3 cf       	rjmp	.-154    	; 0xbb2 <vfprintf+0x82>
     c4c:	98 2f       	mov	r25, r24
     c4e:	9f 7d       	andi	r25, 0xDF	; 223
     c50:	95 54       	subi	r25, 0x45	; 69
     c52:	93 30       	cpi	r25, 0x03	; 3
     c54:	28 f4       	brcc	.+10     	; 0xc60 <vfprintf+0x130>
     c56:	0c 5f       	subi	r16, 0xFC	; 252
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	9f e3       	ldi	r25, 0x3F	; 63
     c5c:	99 83       	std	Y+1, r25	; 0x01
     c5e:	0d c0       	rjmp	.+26     	; 0xc7a <vfprintf+0x14a>
     c60:	83 36       	cpi	r24, 0x63	; 99
     c62:	31 f0       	breq	.+12     	; 0xc70 <vfprintf+0x140>
     c64:	83 37       	cpi	r24, 0x73	; 115
     c66:	71 f0       	breq	.+28     	; 0xc84 <vfprintf+0x154>
     c68:	83 35       	cpi	r24, 0x53	; 83
     c6a:	09 f0       	breq	.+2      	; 0xc6e <vfprintf+0x13e>
     c6c:	55 c0       	rjmp	.+170    	; 0xd18 <vfprintf+0x1e8>
     c6e:	20 c0       	rjmp	.+64     	; 0xcb0 <vfprintf+0x180>
     c70:	f8 01       	movw	r30, r16
     c72:	80 81       	ld	r24, Z
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	0e 5f       	subi	r16, 0xFE	; 254
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	88 24       	eor	r8, r8
     c7c:	83 94       	inc	r8
     c7e:	91 2c       	mov	r9, r1
     c80:	53 01       	movw	r10, r6
     c82:	12 c0       	rjmp	.+36     	; 0xca8 <vfprintf+0x178>
     c84:	28 01       	movw	r4, r16
     c86:	f2 e0       	ldi	r31, 0x02	; 2
     c88:	4f 0e       	add	r4, r31
     c8a:	51 1c       	adc	r5, r1
     c8c:	f8 01       	movw	r30, r16
     c8e:	a0 80       	ld	r10, Z
     c90:	b1 80       	ldd	r11, Z+1	; 0x01
     c92:	36 fe       	sbrs	r3, 6
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <vfprintf+0x16c>
     c96:	69 2d       	mov	r22, r9
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <vfprintf+0x170>
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	7f ef       	ldi	r23, 0xFF	; 255
     ca0:	c5 01       	movw	r24, r10
     ca2:	4e d1       	rcall	.+668    	; 0xf40 <strnlen>
     ca4:	4c 01       	movw	r8, r24
     ca6:	82 01       	movw	r16, r4
     ca8:	f3 2d       	mov	r31, r3
     caa:	ff 77       	andi	r31, 0x7F	; 127
     cac:	3f 2e       	mov	r3, r31
     cae:	15 c0       	rjmp	.+42     	; 0xcda <vfprintf+0x1aa>
     cb0:	28 01       	movw	r4, r16
     cb2:	22 e0       	ldi	r18, 0x02	; 2
     cb4:	42 0e       	add	r4, r18
     cb6:	51 1c       	adc	r5, r1
     cb8:	f8 01       	movw	r30, r16
     cba:	a0 80       	ld	r10, Z
     cbc:	b1 80       	ldd	r11, Z+1	; 0x01
     cbe:	36 fe       	sbrs	r3, 6
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <vfprintf+0x198>
     cc2:	69 2d       	mov	r22, r9
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <vfprintf+0x19c>
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	7f ef       	ldi	r23, 0xFF	; 255
     ccc:	c5 01       	movw	r24, r10
     cce:	2d d1       	rcall	.+602    	; 0xf2a <strnlen_P>
     cd0:	4c 01       	movw	r8, r24
     cd2:	f3 2d       	mov	r31, r3
     cd4:	f0 68       	ori	r31, 0x80	; 128
     cd6:	3f 2e       	mov	r3, r31
     cd8:	82 01       	movw	r16, r4
     cda:	33 fc       	sbrc	r3, 3
     cdc:	19 c0       	rjmp	.+50     	; 0xd10 <vfprintf+0x1e0>
     cde:	82 2d       	mov	r24, r2
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	88 16       	cp	r8, r24
     ce4:	99 06       	cpc	r9, r25
     ce6:	a0 f4       	brcc	.+40     	; 0xd10 <vfprintf+0x1e0>
     ce8:	b6 01       	movw	r22, r12
     cea:	80 e2       	ldi	r24, 0x20	; 32
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	33 d1       	rcall	.+614    	; 0xf56 <fputc>
     cf0:	2a 94       	dec	r2
     cf2:	f5 cf       	rjmp	.-22     	; 0xcde <vfprintf+0x1ae>
     cf4:	f5 01       	movw	r30, r10
     cf6:	37 fc       	sbrc	r3, 7
     cf8:	85 91       	lpm	r24, Z+
     cfa:	37 fe       	sbrs	r3, 7
     cfc:	81 91       	ld	r24, Z+
     cfe:	5f 01       	movw	r10, r30
     d00:	b6 01       	movw	r22, r12
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	28 d1       	rcall	.+592    	; 0xf56 <fputc>
     d06:	21 10       	cpse	r2, r1
     d08:	2a 94       	dec	r2
     d0a:	21 e0       	ldi	r18, 0x01	; 1
     d0c:	82 1a       	sub	r8, r18
     d0e:	91 08       	sbc	r9, r1
     d10:	81 14       	cp	r8, r1
     d12:	91 04       	cpc	r9, r1
     d14:	79 f7       	brne	.-34     	; 0xcf4 <vfprintf+0x1c4>
     d16:	e1 c0       	rjmp	.+450    	; 0xeda <vfprintf+0x3aa>
     d18:	84 36       	cpi	r24, 0x64	; 100
     d1a:	11 f0       	breq	.+4      	; 0xd20 <vfprintf+0x1f0>
     d1c:	89 36       	cpi	r24, 0x69	; 105
     d1e:	39 f5       	brne	.+78     	; 0xd6e <vfprintf+0x23e>
     d20:	f8 01       	movw	r30, r16
     d22:	37 fe       	sbrs	r3, 7
     d24:	07 c0       	rjmp	.+14     	; 0xd34 <vfprintf+0x204>
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	0c 5f       	subi	r16, 0xFC	; 252
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	08 c0       	rjmp	.+16     	; 0xd44 <vfprintf+0x214>
     d34:	60 81       	ld	r22, Z
     d36:	71 81       	ldd	r23, Z+1	; 0x01
     d38:	07 2e       	mov	r0, r23
     d3a:	00 0c       	add	r0, r0
     d3c:	88 0b       	sbc	r24, r24
     d3e:	99 0b       	sbc	r25, r25
     d40:	0e 5f       	subi	r16, 0xFE	; 254
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	f3 2d       	mov	r31, r3
     d46:	ff 76       	andi	r31, 0x6F	; 111
     d48:	3f 2e       	mov	r3, r31
     d4a:	97 ff       	sbrs	r25, 7
     d4c:	09 c0       	rjmp	.+18     	; 0xd60 <vfprintf+0x230>
     d4e:	90 95       	com	r25
     d50:	80 95       	com	r24
     d52:	70 95       	com	r23
     d54:	61 95       	neg	r22
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	8f 4f       	sbci	r24, 0xFF	; 255
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	f0 68       	ori	r31, 0x80	; 128
     d5e:	3f 2e       	mov	r3, r31
     d60:	2a e0       	ldi	r18, 0x0A	; 10
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	a3 01       	movw	r20, r6
     d66:	33 d1       	rcall	.+614    	; 0xfce <__ultoa_invert>
     d68:	88 2e       	mov	r8, r24
     d6a:	86 18       	sub	r8, r6
     d6c:	44 c0       	rjmp	.+136    	; 0xdf6 <vfprintf+0x2c6>
     d6e:	85 37       	cpi	r24, 0x75	; 117
     d70:	31 f4       	brne	.+12     	; 0xd7e <vfprintf+0x24e>
     d72:	23 2d       	mov	r18, r3
     d74:	2f 7e       	andi	r18, 0xEF	; 239
     d76:	b2 2e       	mov	r11, r18
     d78:	2a e0       	ldi	r18, 0x0A	; 10
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	25 c0       	rjmp	.+74     	; 0xdc8 <vfprintf+0x298>
     d7e:	93 2d       	mov	r25, r3
     d80:	99 7f       	andi	r25, 0xF9	; 249
     d82:	b9 2e       	mov	r11, r25
     d84:	8f 36       	cpi	r24, 0x6F	; 111
     d86:	c1 f0       	breq	.+48     	; 0xdb8 <vfprintf+0x288>
     d88:	18 f4       	brcc	.+6      	; 0xd90 <vfprintf+0x260>
     d8a:	88 35       	cpi	r24, 0x58	; 88
     d8c:	79 f0       	breq	.+30     	; 0xdac <vfprintf+0x27c>
     d8e:	ae c0       	rjmp	.+348    	; 0xeec <vfprintf+0x3bc>
     d90:	80 37       	cpi	r24, 0x70	; 112
     d92:	19 f0       	breq	.+6      	; 0xd9a <vfprintf+0x26a>
     d94:	88 37       	cpi	r24, 0x78	; 120
     d96:	21 f0       	breq	.+8      	; 0xda0 <vfprintf+0x270>
     d98:	a9 c0       	rjmp	.+338    	; 0xeec <vfprintf+0x3bc>
     d9a:	e9 2f       	mov	r30, r25
     d9c:	e0 61       	ori	r30, 0x10	; 16
     d9e:	be 2e       	mov	r11, r30
     da0:	b4 fe       	sbrs	r11, 4
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <vfprintf+0x28e>
     da4:	fb 2d       	mov	r31, r11
     da6:	f4 60       	ori	r31, 0x04	; 4
     da8:	bf 2e       	mov	r11, r31
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <vfprintf+0x28e>
     dac:	34 fe       	sbrs	r3, 4
     dae:	0a c0       	rjmp	.+20     	; 0xdc4 <vfprintf+0x294>
     db0:	29 2f       	mov	r18, r25
     db2:	26 60       	ori	r18, 0x06	; 6
     db4:	b2 2e       	mov	r11, r18
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0x294>
     db8:	28 e0       	ldi	r18, 0x08	; 8
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <vfprintf+0x298>
     dbe:	20 e1       	ldi	r18, 0x10	; 16
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x298>
     dc4:	20 e1       	ldi	r18, 0x10	; 16
     dc6:	32 e0       	ldi	r19, 0x02	; 2
     dc8:	f8 01       	movw	r30, r16
     dca:	b7 fe       	sbrs	r11, 7
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <vfprintf+0x2ac>
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	0c 5f       	subi	r16, 0xFC	; 252
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	06 c0       	rjmp	.+12     	; 0xde8 <vfprintf+0x2b8>
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 5f       	subi	r16, 0xFE	; 254
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	a3 01       	movw	r20, r6
     dea:	f1 d0       	rcall	.+482    	; 0xfce <__ultoa_invert>
     dec:	88 2e       	mov	r8, r24
     dee:	86 18       	sub	r8, r6
     df0:	fb 2d       	mov	r31, r11
     df2:	ff 77       	andi	r31, 0x7F	; 127
     df4:	3f 2e       	mov	r3, r31
     df6:	36 fe       	sbrs	r3, 6
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <vfprintf+0x2e4>
     dfa:	23 2d       	mov	r18, r3
     dfc:	2e 7f       	andi	r18, 0xFE	; 254
     dfe:	a2 2e       	mov	r10, r18
     e00:	89 14       	cp	r8, r9
     e02:	58 f4       	brcc	.+22     	; 0xe1a <vfprintf+0x2ea>
     e04:	34 fe       	sbrs	r3, 4
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <vfprintf+0x2ee>
     e08:	32 fc       	sbrc	r3, 2
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <vfprintf+0x2ee>
     e0c:	83 2d       	mov	r24, r3
     e0e:	8e 7e       	andi	r24, 0xEE	; 238
     e10:	a8 2e       	mov	r10, r24
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <vfprintf+0x2ee>
     e14:	b8 2c       	mov	r11, r8
     e16:	a3 2c       	mov	r10, r3
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <vfprintf+0x2f0>
     e1a:	b8 2c       	mov	r11, r8
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <vfprintf+0x2f0>
     e1e:	b9 2c       	mov	r11, r9
     e20:	a4 fe       	sbrs	r10, 4
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <vfprintf+0x312>
     e24:	fe 01       	movw	r30, r28
     e26:	e8 0d       	add	r30, r8
     e28:	f1 1d       	adc	r31, r1
     e2a:	80 81       	ld	r24, Z
     e2c:	80 33       	cpi	r24, 0x30	; 48
     e2e:	21 f4       	brne	.+8      	; 0xe38 <vfprintf+0x308>
     e30:	9a 2d       	mov	r25, r10
     e32:	99 7e       	andi	r25, 0xE9	; 233
     e34:	a9 2e       	mov	r10, r25
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <vfprintf+0x31a>
     e38:	a2 fe       	sbrs	r10, 2
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <vfprintf+0x318>
     e3c:	b3 94       	inc	r11
     e3e:	b3 94       	inc	r11
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <vfprintf+0x31a>
     e42:	8a 2d       	mov	r24, r10
     e44:	86 78       	andi	r24, 0x86	; 134
     e46:	09 f0       	breq	.+2      	; 0xe4a <vfprintf+0x31a>
     e48:	b3 94       	inc	r11
     e4a:	a3 fc       	sbrc	r10, 3
     e4c:	10 c0       	rjmp	.+32     	; 0xe6e <vfprintf+0x33e>
     e4e:	a0 fe       	sbrs	r10, 0
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x32e>
     e52:	b2 14       	cp	r11, r2
     e54:	80 f4       	brcc	.+32     	; 0xe76 <vfprintf+0x346>
     e56:	28 0c       	add	r2, r8
     e58:	92 2c       	mov	r9, r2
     e5a:	9b 18       	sub	r9, r11
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <vfprintf+0x348>
     e5e:	b2 14       	cp	r11, r2
     e60:	58 f4       	brcc	.+22     	; 0xe78 <vfprintf+0x348>
     e62:	b6 01       	movw	r22, r12
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	76 d0       	rcall	.+236    	; 0xf56 <fputc>
     e6a:	b3 94       	inc	r11
     e6c:	f8 cf       	rjmp	.-16     	; 0xe5e <vfprintf+0x32e>
     e6e:	b2 14       	cp	r11, r2
     e70:	18 f4       	brcc	.+6      	; 0xe78 <vfprintf+0x348>
     e72:	2b 18       	sub	r2, r11
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x34a>
     e76:	98 2c       	mov	r9, r8
     e78:	21 2c       	mov	r2, r1
     e7a:	a4 fe       	sbrs	r10, 4
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <vfprintf+0x36c>
     e7e:	b6 01       	movw	r22, r12
     e80:	80 e3       	ldi	r24, 0x30	; 48
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	68 d0       	rcall	.+208    	; 0xf56 <fputc>
     e86:	a2 fe       	sbrs	r10, 2
     e88:	16 c0       	rjmp	.+44     	; 0xeb6 <vfprintf+0x386>
     e8a:	a1 fc       	sbrc	r10, 1
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <vfprintf+0x364>
     e8e:	88 e7       	ldi	r24, 0x78	; 120
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <vfprintf+0x368>
     e94:	88 e5       	ldi	r24, 0x58	; 88
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	b6 01       	movw	r22, r12
     e9a:	0c c0       	rjmp	.+24     	; 0xeb4 <vfprintf+0x384>
     e9c:	8a 2d       	mov	r24, r10
     e9e:	86 78       	andi	r24, 0x86	; 134
     ea0:	51 f0       	breq	.+20     	; 0xeb6 <vfprintf+0x386>
     ea2:	a1 fe       	sbrs	r10, 1
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <vfprintf+0x37a>
     ea6:	8b e2       	ldi	r24, 0x2B	; 43
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <vfprintf+0x37c>
     eaa:	80 e2       	ldi	r24, 0x20	; 32
     eac:	a7 fc       	sbrc	r10, 7
     eae:	8d e2       	ldi	r24, 0x2D	; 45
     eb0:	b6 01       	movw	r22, r12
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	50 d0       	rcall	.+160    	; 0xf56 <fputc>
     eb6:	89 14       	cp	r8, r9
     eb8:	30 f4       	brcc	.+12     	; 0xec6 <vfprintf+0x396>
     eba:	b6 01       	movw	r22, r12
     ebc:	80 e3       	ldi	r24, 0x30	; 48
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	4a d0       	rcall	.+148    	; 0xf56 <fputc>
     ec2:	9a 94       	dec	r9
     ec4:	f8 cf       	rjmp	.-16     	; 0xeb6 <vfprintf+0x386>
     ec6:	8a 94       	dec	r8
     ec8:	f3 01       	movw	r30, r6
     eca:	e8 0d       	add	r30, r8
     ecc:	f1 1d       	adc	r31, r1
     ece:	80 81       	ld	r24, Z
     ed0:	b6 01       	movw	r22, r12
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	40 d0       	rcall	.+128    	; 0xf56 <fputc>
     ed6:	81 10       	cpse	r8, r1
     ed8:	f6 cf       	rjmp	.-20     	; 0xec6 <vfprintf+0x396>
     eda:	22 20       	and	r2, r2
     edc:	09 f4       	brne	.+2      	; 0xee0 <vfprintf+0x3b0>
     ede:	4e ce       	rjmp	.-868    	; 0xb7c <vfprintf+0x4c>
     ee0:	b6 01       	movw	r22, r12
     ee2:	80 e2       	ldi	r24, 0x20	; 32
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	37 d0       	rcall	.+110    	; 0xf56 <fputc>
     ee8:	2a 94       	dec	r2
     eea:	f7 cf       	rjmp	.-18     	; 0xeda <vfprintf+0x3aa>
     eec:	f6 01       	movw	r30, r12
     eee:	86 81       	ldd	r24, Z+6	; 0x06
     ef0:	97 81       	ldd	r25, Z+7	; 0x07
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x3c8>
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	9f ef       	ldi	r25, 0xFF	; 255
     ef8:	2b 96       	adiw	r28, 0x0b	; 11
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	9f 90       	pop	r9
     f1a:	8f 90       	pop	r8
     f1c:	7f 90       	pop	r7
     f1e:	6f 90       	pop	r6
     f20:	5f 90       	pop	r5
     f22:	4f 90       	pop	r4
     f24:	3f 90       	pop	r3
     f26:	2f 90       	pop	r2
     f28:	08 95       	ret

00000f2a <strnlen_P>:
     f2a:	fc 01       	movw	r30, r24
     f2c:	05 90       	lpm	r0, Z+
     f2e:	61 50       	subi	r22, 0x01	; 1
     f30:	70 40       	sbci	r23, 0x00	; 0
     f32:	01 10       	cpse	r0, r1
     f34:	d8 f7       	brcc	.-10     	; 0xf2c <strnlen_P+0x2>
     f36:	80 95       	com	r24
     f38:	90 95       	com	r25
     f3a:	8e 0f       	add	r24, r30
     f3c:	9f 1f       	adc	r25, r31
     f3e:	08 95       	ret

00000f40 <strnlen>:
     f40:	fc 01       	movw	r30, r24
     f42:	61 50       	subi	r22, 0x01	; 1
     f44:	70 40       	sbci	r23, 0x00	; 0
     f46:	01 90       	ld	r0, Z+
     f48:	01 10       	cpse	r0, r1
     f4a:	d8 f7       	brcc	.-10     	; 0xf42 <strnlen+0x2>
     f4c:	80 95       	com	r24
     f4e:	90 95       	com	r25
     f50:	8e 0f       	add	r24, r30
     f52:	9f 1f       	adc	r25, r31
     f54:	08 95       	ret

00000f56 <fputc>:
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	fb 01       	movw	r30, r22
     f60:	23 81       	ldd	r18, Z+3	; 0x03
     f62:	21 fd       	sbrc	r18, 1
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <fputc+0x16>
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	9f ef       	ldi	r25, 0xFF	; 255
     f6a:	2c c0       	rjmp	.+88     	; 0xfc4 <fputc+0x6e>
     f6c:	22 ff       	sbrs	r18, 2
     f6e:	16 c0       	rjmp	.+44     	; 0xf9c <fputc+0x46>
     f70:	46 81       	ldd	r20, Z+6	; 0x06
     f72:	57 81       	ldd	r21, Z+7	; 0x07
     f74:	24 81       	ldd	r18, Z+4	; 0x04
     f76:	35 81       	ldd	r19, Z+5	; 0x05
     f78:	42 17       	cp	r20, r18
     f7a:	53 07       	cpc	r21, r19
     f7c:	44 f4       	brge	.+16     	; 0xf8e <fputc+0x38>
     f7e:	a0 81       	ld	r26, Z
     f80:	b1 81       	ldd	r27, Z+1	; 0x01
     f82:	9d 01       	movw	r18, r26
     f84:	2f 5f       	subi	r18, 0xFF	; 255
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	31 83       	std	Z+1, r19	; 0x01
     f8a:	20 83       	st	Z, r18
     f8c:	8c 93       	st	X, r24
     f8e:	26 81       	ldd	r18, Z+6	; 0x06
     f90:	37 81       	ldd	r19, Z+7	; 0x07
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	37 83       	std	Z+7, r19	; 0x07
     f98:	26 83       	std	Z+6, r18	; 0x06
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <fputc+0x6e>
     f9c:	8b 01       	movw	r16, r22
     f9e:	ec 01       	movw	r28, r24
     fa0:	fb 01       	movw	r30, r22
     fa2:	00 84       	ldd	r0, Z+8	; 0x08
     fa4:	f1 85       	ldd	r31, Z+9	; 0x09
     fa6:	e0 2d       	mov	r30, r0
     fa8:	09 95       	icall
     faa:	89 2b       	or	r24, r25
     fac:	e1 f6       	brne	.-72     	; 0xf66 <fputc+0x10>
     fae:	d8 01       	movw	r26, r16
     fb0:	16 96       	adiw	r26, 0x06	; 6
     fb2:	8d 91       	ld	r24, X+
     fb4:	9c 91       	ld	r25, X
     fb6:	17 97       	sbiw	r26, 0x07	; 7
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	17 96       	adiw	r26, 0x07	; 7
     fbc:	9c 93       	st	X, r25
     fbe:	8e 93       	st	-X, r24
     fc0:	16 97       	sbiw	r26, 0x06	; 6
     fc2:	ce 01       	movw	r24, r28
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <__ultoa_invert>:
     fce:	fa 01       	movw	r30, r20
     fd0:	aa 27       	eor	r26, r26
     fd2:	28 30       	cpi	r18, 0x08	; 8
     fd4:	51 f1       	breq	.+84     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
     fd6:	20 31       	cpi	r18, 0x10	; 16
     fd8:	81 f1       	breq	.+96     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
     fda:	e8 94       	clt
     fdc:	6f 93       	push	r22
     fde:	6e 7f       	andi	r22, 0xFE	; 254
     fe0:	6e 5f       	subi	r22, 0xFE	; 254
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	af 4f       	sbci	r26, 0xFF	; 255
     fea:	b1 e0       	ldi	r27, 0x01	; 1
     fec:	3e d0       	rcall	.+124    	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
     fee:	b4 e0       	ldi	r27, 0x04	; 4
     ff0:	3c d0       	rcall	.+120    	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
     ff2:	67 0f       	add	r22, r23
     ff4:	78 1f       	adc	r23, r24
     ff6:	89 1f       	adc	r24, r25
     ff8:	9a 1f       	adc	r25, r26
     ffa:	a1 1d       	adc	r26, r1
     ffc:	68 0f       	add	r22, r24
     ffe:	79 1f       	adc	r23, r25
    1000:	8a 1f       	adc	r24, r26
    1002:	91 1d       	adc	r25, r1
    1004:	a1 1d       	adc	r26, r1
    1006:	6a 0f       	add	r22, r26
    1008:	71 1d       	adc	r23, r1
    100a:	81 1d       	adc	r24, r1
    100c:	91 1d       	adc	r25, r1
    100e:	a1 1d       	adc	r26, r1
    1010:	20 d0       	rcall	.+64     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1012:	09 f4       	brne	.+2      	; 0x1016 <__DATA_REGION_LENGTH__+0x16>
    1014:	68 94       	set
    1016:	3f 91       	pop	r19
    1018:	2a e0       	ldi	r18, 0x0A	; 10
    101a:	26 9f       	mul	r18, r22
    101c:	11 24       	eor	r1, r1
    101e:	30 19       	sub	r19, r0
    1020:	30 5d       	subi	r19, 0xD0	; 208
    1022:	31 93       	st	Z+, r19
    1024:	de f6       	brtc	.-74     	; 0xfdc <__ultoa_invert+0xe>
    1026:	cf 01       	movw	r24, r30
    1028:	08 95       	ret
    102a:	46 2f       	mov	r20, r22
    102c:	47 70       	andi	r20, 0x07	; 7
    102e:	40 5d       	subi	r20, 0xD0	; 208
    1030:	41 93       	st	Z+, r20
    1032:	b3 e0       	ldi	r27, 0x03	; 3
    1034:	0f d0       	rcall	.+30     	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1036:	c9 f7       	brne	.-14     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    1038:	f6 cf       	rjmp	.-20     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    103a:	46 2f       	mov	r20, r22
    103c:	4f 70       	andi	r20, 0x0F	; 15
    103e:	40 5d       	subi	r20, 0xD0	; 208
    1040:	4a 33       	cpi	r20, 0x3A	; 58
    1042:	18 f0       	brcs	.+6      	; 0x104a <__DATA_REGION_LENGTH__+0x4a>
    1044:	49 5d       	subi	r20, 0xD9	; 217
    1046:	31 fd       	sbrc	r19, 1
    1048:	40 52       	subi	r20, 0x20	; 32
    104a:	41 93       	st	Z+, r20
    104c:	02 d0       	rcall	.+4      	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    104e:	a9 f7       	brne	.-22     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    1050:	ea cf       	rjmp	.-44     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1052:	b4 e0       	ldi	r27, 0x04	; 4
    1054:	a6 95       	lsr	r26
    1056:	97 95       	ror	r25
    1058:	87 95       	ror	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	ba 95       	dec	r27
    1060:	c9 f7       	brne	.-14     	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	61 05       	cpc	r22, r1
    1066:	71 05       	cpc	r23, r1
    1068:	08 95       	ret
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	0a 2e       	mov	r0, r26
    1070:	06 94       	lsr	r0
    1072:	57 95       	ror	r21
    1074:	47 95       	ror	r20
    1076:	37 95       	ror	r19
    1078:	27 95       	ror	r18
    107a:	ba 95       	dec	r27
    107c:	c9 f7       	brne	.-14     	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    107e:	62 0f       	add	r22, r18
    1080:	73 1f       	adc	r23, r19
    1082:	84 1f       	adc	r24, r20
    1084:	95 1f       	adc	r25, r21
    1086:	a0 1d       	adc	r26, r0
    1088:	08 95       	ret

0000108a <_exit>:
    108a:	f8 94       	cli

0000108c <__stop_program>:
    108c:	ff cf       	rjmp	.-2      	; 0x108c <__stop_program>
